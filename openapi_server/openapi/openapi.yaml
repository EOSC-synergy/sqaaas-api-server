openapi: 3.0.0
info:
  description: OpenAPI specification for the Software and Service Quality Assurance
    as a Service (SQAaaS) component.
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.txt
  title: SQAaaS API
  version: 2.0.0
servers:
- description: Main (production) API server
  url: http://api.sqaaas.eosc-synergy.eu/v1
- description: Staging API server for testing
  url: https://api-staging.sqaaas.eosc-synergy.eu
- description: Development API server (mock server)
  url: https://api-dev.sqaaas.eosc-synergy.eu
paths:
  /criteria:
    get:
      operationId: get_criteria
      parameters:
      - description: Get data from a specific criterion
        explode: true
        in: query
        name: criterion_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Criterion'
                type: array
          description: Successful operation
        "400":
          description: Invalid criterion supplied
        "404":
          description: Criterion not found
      summary: Returns data about criteria
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline:
    get:
      description: |
        Returns the list of IDs for the defined pipelines.
      operationId: get_pipelines
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pipeline'
                type: array
          description: Successful operation
      summary: Gets pipeline IDs.
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |
        Provides a ready-to-use Jenkins pipeline based on the v2 series of jenkins-pipeline-library.
      operationId: add_pipeline
      parameters:
      - description: Flag to indicate whether the pipeline shall print via via stdout
          the reports produced by the tools (required by QAA module)
        explode: true
        in: query
        name: report_to_stdout
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              example:
                id: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: Created
          links:
            get_pipeline_by_pipeline_id:
              description: "The `id` value returned in the response can be used as\
                \ the `pipeline_id` parameter in `GET /pipeline/{pipeline_id}`.\n"
              operationId: get_pipeline_by_id
              parameters:
                pipeline_id: $response.body#/id
        "400":
          description: Request failed validation
      summary: Creates a pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/assessment:
    post:
      description: |
        Creates a pipeline for assessment (QAA module).
      operationId: add_pipeline_for_assessment
      parameters:
      - description: Optional tools that shall be accounted
        explode: true
        in: query
        name: optional_tools
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline_assessment'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              example:
                id: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: Created
          links:
            get_pipeline_by_pipeline_id:
              description: "The `id` value returned in the response can be used as\
                \ the `pipeline_id` parameter in `GET /pipeline/{pipeline_id}`.\n"
              operationId: get_pipeline_by_id
              parameters:
                pipeline_id: $response.body#/id
        "400":
          description: Request failed validation
      summary: Creates a pipeline for assessment (QAA module).
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/assessment/{pipeline_id}/output:
    get:
      description: |
        Returns the reporting and badging data from the execution of the assessment pipeline.
      operationId: get_output_for_assessment
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentOutput'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Pipeline has not been executed
      summary: Get the assessment output (QAA module)
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}:
    delete:
      operationId: delete_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Pipeline successfully deleted
        "400":
          description: Request failed validation
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: "The server while acting as a gateway or a proxy, received\n\
            an invalid response from the upstream server it accessed\nin attempting\
            \ to fulfill the request.\n"
      summary: Delete pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      operationId: get_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Find pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      operationId: update_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to indicate whether the pipeline shall print via via stdout
          the reports produced by the tools (required by QAA module)
        explode: true
        in: query
        name: report_to_stdout
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Pipeline successfully updated
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: "The server while acting as a gateway or a proxy, received\n\
            an invalid response from the upstream server it accessed\nin attempting\
            \ to fulfill the request.\n"
      summary: Update pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/{pipeline_id}/badge:
    get:
      description: |
        Returns the badge data associated with the pipeline.
      operationId: get_badge
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Badge not issued
      summary: Gets badge data associated with the given pipeline
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/composer:
    get:
      description: |
        Returns the content of JePL's docker-compose.yml file.
      operationId: get_pipeline_composer
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_composer'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets composer configuration used by the pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/composer/jepl:
    get:
      description: |
        Returns the content of JePL's composer file.
      operationId: get_pipeline_composer_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets JePL composer configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/compressed_files:
    get:
      description: |
        Obtains the generated JePL files in compressed format.
      operationId: get_compressed_files
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: ZIP fle with JePL files
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Get JePL files in compressed format.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config:
    get:
      description: |
        Returns the content of JePL's config.yml file.
      operationId: get_pipeline_config
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_config'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets pipeline's main configuration.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config/jepl:
    get:
      description: |
        Returns the content of JePL's config file.
      operationId: get_pipeline_config_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets JePL config configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config/scripts:
    get:
      description: |
        Returns the content of the list of scripts generated for the commands builder.
      operationId: get_pipeline_commands_scripts
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets the commands builder scripts
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/jenkinsfile:
    get:
      description: |
        Returns the content of JePL's Jenkinsfile file.
      operationId: get_pipeline_jenkinsfile
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_jenkinsfile'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets Jenkins pipeline definition used by the pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/jenkinsfile/jepl:
    get:
      description: |
        Returns the content of Jenkinsfile file for the given pipeline.
      operationId: get_pipeline_jenkinsfile_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets Jenkins configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/output:
    get:
      description: |
        Returns the console output from the pipeline execution.
      operationId: get_pipeline_output
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to indicate whether the returned output shall be validate
          using sqaaas-reporting tool
        explode: true
        in: query
        name: validate
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriterionOutput'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Pipeline has not been executed
      summary: Get output from pipeline execution
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/pull_request:
    post:
      description: |
        Create a pull request with the generated JePL files.
      operationId: create_pull_request
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                repo:
                  description: URL of the upstream repo
                  format: uri
                  title: repo
                  type: string
                branch:
                  description: Brach from the upstream repo used as the base for the
                    pull request
                  title: branch
                  type: string
              required:
              - repo
              title: inline_object
              type: object
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              example:
                pull_request_url: https://github.com/eosc-synergy/sqaaas-api-spec/pull/23
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: "The server while acting as a gateway or a proxy, received\n\
            an invalid response from the upstream server it accessed\nin attempting\
            \ to fulfill the request.\n"
      summary: Creates pull request with JePL files.
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/{pipeline_id}/run:
    post:
      description: |
        Executes the given pipeline by means of the Jenkins API.
      operationId: run_pipeline
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to indicate whether a badge shall be issued if the pipeline
          succeds
        explode: true
        in: query
        name: issue_badge
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: URL of the upstream repository to fetch the code from
        explode: true
        in: query
        name: repo_url
        required: false
        schema:
          format: uri
          type: string
        style: form
      - description: Branch name of the upstream repository to fetch the code from
        explode: true
        in: query
        name: repo_branch
        required: false
        schema:
          type: string
        style: form
      - description: Flag to indicate that the pipeline will run until the end
        explode: true
        in: query
        name: keepgoing
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: "The server while acting as a gateway or a proxy, received\n\
            an invalid response from the upstream server it accessed\nin attempting\
            \ to fulfill the request.\n"
      summary: Runs pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/status:
    get:
      description: |
        Obtains the build URL in Jenkins for the given pipeline.
      operationId: get_pipeline_status
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Pipeline has not been executed
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: "The server while acting as a gateway or a proxy, received\n\
            an invalid response from the upstream server it accessed\nin attempting\
            \ to fulfill the request.\n"
      summary: Get pipeline status.
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  requestBodies:
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
  responses:
    BadGateway:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpstreamError'
      description: "The server while acting as a gateway or a proxy, received\nan\
        \ invalid response from the upstream server it accessed\nin attempting to\
        \ fulfill the request.\n"
  schemas:
    ToolArg:
      example:
        summary: summary
        args:
        - null
        - null
        repeatable: false
        selectable: true
        format: string
        description: Detect the license of the given project
        type: subcommand
        value: detect
        option: option
      properties:
        type:
          description: type of argument
          enum:
          - subcommand
          - positional
          - optional
          title: type
          type: string
        description:
          description: hint about what the command does
          example: Detect the license of the given project
          title: description
          type: string
        value:
          description: Value for the argument (can be of any type)
          example: detect
          title: value
        option:
          description: "Name of the option, in the event of optional arguments"
          title: option
          type: string
        summary:
          description: very brief (2/3 words) description (to be rendered by web clients)
          title: summary
          type: string
        format:
          description: The value format (to be rendered by web clients)
          enum:
          - string
          - array
          title: format
          type: string
        selectable:
          default: true
          description: Whether the argument can be selected by the user (to be rendered
            by web clients)
          title: selectable
          type: boolean
        repeatable:
          default: false
          description: Whether the argument can be repeated (to be rendered by web
            clients)
          title: repeatable
          type: boolean
        args:
          items:
            $ref: '#/components/schemas/ToolArg'
          title: args
          type: array
      required:
      - description
      - type
      title: ToolArg
      type: object
    Tool:
      description: Details about the tooling metadata (see https://github.com/eosc-synergy/sqaaas-tooling)
      example:
        args:
        - summary: summary
          args:
          - null
          - null
          repeatable: false
          selectable: true
          format: string
          description: Detect the license of the given project
          type: subcommand
          value: detect
          option: option
        - summary: summary
          args:
          - null
          - null
          repeatable: false
          selectable: true
          format: string
          description: Detect the license of the given project
          type: subcommand
          value: detect
          option: option
        docs: https://openapi-generator.tech
        name: name
        lang: lang
        jepl_support: true
        executable: executable
        docker:
          image: image
          dockerfile: dockerfile
          reviewed: 2000-01-23
          oneshot: true
      properties:
        name:
          title: name
          type: string
        lang:
          title: lang
          type: string
        jepl_support:
          title: jepl_support
          type: boolean
        docs:
          format: uri
          title: docs
          type: string
        docker:
          $ref: '#/components/schemas/Tool_docker'
        executable:
          title: executable
          type: string
        args:
          items:
            $ref: '#/components/schemas/ToolArg'
          title: args
          type: array
      required:
      - docker
      - docs
      - lang
      - name
      title: Tool
      type: object
    Criterion:
      example:
        description:
          msg: msg
          docs: https://openapi-generator.tech
          improves: improves
        id: QC.Sty
        type: software
        tools:
        - args:
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          docs: https://openapi-generator.tech
          name: name
          lang: lang
          jepl_support: true
          executable: executable
          docker:
            image: image
            dockerfile: dockerfile
            reviewed: 2000-01-23
            oneshot: true
        - args:
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          docs: https://openapi-generator.tech
          name: name
          lang: lang
          jepl_support: true
          executable: executable
          docker:
            image: image
            dockerfile: dockerfile
            reviewed: 2000-01-23
            oneshot: true
      properties:
        id:
          description: ID of the criterion
          example: QC.Sty
          title: id
          type: string
        type:
          description: Type of criterion
          enum:
          - software
          - service
          - fair
          title: type
          type: string
        description:
          $ref: '#/components/schemas/Criterion_description'
        tools:
          description: Set of tools that are supported for the given criterion
          items:
            $ref: '#/components/schemas/Tool'
          title: tools
          type: array
      title: Criterion
      type: object
    Repository:
      example:
        repo: https://github.com/eosc-synergy/sqaaas-api-spec
        branch: master
      properties:
        repo:
          description: URL of the repository
          example: https://github.com/eosc-synergy/sqaaas-api-spec
          format: uri
          title: repo
          type: string
        branch:
          description: Branch name
          example: master
          title: branch
          type: string
      title: Repository
      type: object
    Creds_user_pass:
      example:
        password_var: GIT_PASS
        username_var: GIT_USER
        id: my-dockerhub-token
        type: username_password
      properties:
        id:
          description: Credential ID (as defined in Jenkins)
          example: my-dockerhub-token
          title: id
          type: string
        type:
          description: Credential type
          enum:
          - username_password
          title: type
          type: string
        username_var:
          example: GIT_USER
          title: username_var
          type: string
        password_var:
          example: GIT_PASS
          title: password_var
          type: string
      required:
      - id
      - password_var
      - username_var
      title: Creds_user_pass
      type: object
    Commands_simplified:
      description: List of commands to execute
      example:
      - mvn checkstyle:check
      items:
        minLength: 1
        type: string
      title: Commands_simplified
      type: array
    Tox_simplified:
      description: Details about Python's tox configuration
      example:
        tox_file: tox.ini
        testenv:
        - cover
      properties:
        testenv:
          default:
          - ALL
          example:
          - cover
          items:
            minLength: 1
            type: string
          title: testenv
          type: array
        tox_file:
          default: tox.ini
          example: tox.ini
          title: tox_file
          type: string
      title: Tox_simplified
      type: object
    When_branch:
      example:
        comparator: GLOB
        pattern: release-\\d+
      properties:
        pattern:
          example: release-\\d+
          minLength: 1
          title: pattern
          type: string
        comparator:
          default: GLOB
          enum:
          - EQUALS
          - GLOB
          - REGEXP
          title: comparator
          type: string
      required:
      - pattern
      title: When_branch
      type: object
    When_building_tag:
      title: When_building_tag
      type: boolean
    CriterionBuild:
      additionalProperties:
        $ref: '#/components/schemas/CriterionBuild_addl_props'
      description: Definition of software and service criteria to be run by the pipeline
      title: sqa_criteria
      type: object
    Environment:
      additionalProperties:
        type: string
      description: Environment variables to be used at pipeline runtime
      example:
        JPL_IGNOREFAILURES: defined
        JPL_DOCKERPUSH: docs service1 service4
      title: Environment
      type: object
    JePL_config:
      description: Properties for a single JePL's config.yml file
      example:
        environment:
          JPL_IGNOREFAILURES: defined
          JPL_DOCKERPUSH: docs service1 service4
        sqa_criteria:
          key:
            repos:
            - container: testing
              repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
              tox:
                tox_file: tox.ini
                testenv:
                - cover
              commands:
              - mvn checkstyle:check
              tool:
                args:
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                docs: https://openapi-generator.tech
                name: name
                lang: lang
                jepl_support: true
                executable: executable
                docker:
                  image: image
                  dockerfile: dockerfile
                  reviewed: 2000-01-23
                  oneshot: true
            - container: testing
              repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
              tox:
                tox_file: tox.ini
                testenv:
                - cover
              commands:
              - mvn checkstyle:check
              tool:
                args:
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                docs: https://openapi-generator.tech
                name: name
                lang: lang
                jepl_support: true
                executable: executable
                docker:
                  image: image
                  dockerfile: dockerfile
                  reviewed: 2000-01-23
                  oneshot: true
            when:
              building_tag: true
              branch:
                comparator: GLOB
                pattern: release-\\d+
        config:
          project_repos:
          - repo: https://github.com/eosc-synergy/sqaaas-api-spec
            branch: master
          - repo: https://github.com/eosc-synergy/sqaaas-api-spec
            branch: master
          credentials:
          - password_var: GIT_PASS
            username_var: GIT_USER
            id: my-dockerhub-token
            type: username_password
          - password_var: GIT_PASS
            username_var: GIT_USER
            id: my-dockerhub-token
            type: username_password
        timeout: 1
      properties:
        config:
          $ref: '#/components/schemas/JePL_config_config'
        sqa_criteria:
          additionalProperties:
            $ref: '#/components/schemas/CriterionBuild_addl_props'
          description: Definition of software and service criteria to be run by the
            pipeline
          title: sqa_criteria
          type: object
        environment:
          additionalProperties:
            type: string
          description: Environment variables to be used at pipeline runtime
          example:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          title: Environment
          type: object
        timeout:
          description: Maximum timeframe for the pipeline execution
          minimum: 1
          title: timeout
          type: integer
      title: JePL_config
      type: object
    ServiceDockerCompose:
      additionalProperties:
        $ref: '#/components/schemas/ServiceDockerCompose_addl_props'
      title: services
      type: object
    JePL_composer:
      description: Details about the composition of the services required for the
        pipeline execution
      example:
        services:
          key:
            image:
              registry:
                push: true
                credential_id: my-dockerhub-cred
              name: eoscsynergy/sqaaas-api-spec:1.0.0
            hostname: sqaaas-host
            environment:
              JPL_IGNOREFAILURES: defined
              JPL_DOCKERPUSH: docs service1 service4
            build:
              args:
                key: args
              dockerfile: Dockerfile-alternate
              context: ./dir
            volumes:
            - source: ./
              type: bind
              target: ./sqaaas-build
            - source: ./
              type: bind
              target: ./sqaaas-build
            oneshot: true
            command: sleep 600000
        version: "3.7"
      properties:
        version:
          example: "3.7"
          title: version
          type: string
        services:
          additionalProperties:
            $ref: '#/components/schemas/ServiceDockerCompose_addl_props'
          title: services
          type: object
      title: JePL_composer
      type: object
    JePL_jenkinsfile:
      description: Details about the Jenkins Pipeline as Code
      example:
        stages:
        - pipeline_config:
            credentials_id: userpass_dockerhub
            base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
            base_repository: master
            jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
            config_file: ./.sqa/config.yml
          when:
            branches:
            - master
            - master
        - pipeline_config:
            credentials_id: userpass_dockerhub
            base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
            base_repository: master
            jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
            config_file: ./.sqa/config.yml
          when:
            branches:
            - master
            - master
      properties:
        stages:
          items:
            $ref: '#/components/schemas/JePL_jenkinsfile_stages_inner'
          title: stages
          type: array
      title: JePL_jenkinsfile
      type: object
    Pipeline:
      example:
        config_data:
        - environment:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          sqa_criteria:
            key:
              repos:
              - container: testing
                repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
                tox:
                  tox_file: tox.ini
                  testenv:
                  - cover
                commands:
                - mvn checkstyle:check
                tool:
                  args:
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  docs: https://openapi-generator.tech
                  name: name
                  lang: lang
                  jepl_support: true
                  executable: executable
                  docker:
                    image: image
                    dockerfile: dockerfile
                    reviewed: 2000-01-23
                    oneshot: true
              - container: testing
                repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
                tox:
                  tox_file: tox.ini
                  testenv:
                  - cover
                commands:
                - mvn checkstyle:check
                tool:
                  args:
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  docs: https://openapi-generator.tech
                  name: name
                  lang: lang
                  jepl_support: true
                  executable: executable
                  docker:
                    image: image
                    dockerfile: dockerfile
                    reviewed: 2000-01-23
                    oneshot: true
              when:
                building_tag: true
                branch:
                  comparator: GLOB
                  pattern: release-\\d+
          config:
            project_repos:
            - repo: https://github.com/eosc-synergy/sqaaas-api-spec
              branch: master
            - repo: https://github.com/eosc-synergy/sqaaas-api-spec
              branch: master
            credentials:
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
          timeout: 1
        - environment:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          sqa_criteria:
            key:
              repos:
              - container: testing
                repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
                tox:
                  tox_file: tox.ini
                  testenv:
                  - cover
                commands:
                - mvn checkstyle:check
                tool:
                  args:
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  docs: https://openapi-generator.tech
                  name: name
                  lang: lang
                  jepl_support: true
                  executable: executable
                  docker:
                    image: image
                    dockerfile: dockerfile
                    reviewed: 2000-01-23
                    oneshot: true
              - container: testing
                repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
                tox:
                  tox_file: tox.ini
                  testenv:
                  - cover
                commands:
                - mvn checkstyle:check
                tool:
                  args:
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  - summary: summary
                    args:
                    - null
                    - null
                    repeatable: false
                    selectable: true
                    format: string
                    description: Detect the license of the given project
                    type: subcommand
                    value: detect
                    option: option
                  docs: https://openapi-generator.tech
                  name: name
                  lang: lang
                  jepl_support: true
                  executable: executable
                  docker:
                    image: image
                    dockerfile: dockerfile
                    reviewed: 2000-01-23
                    oneshot: true
              when:
                building_tag: true
                branch:
                  comparator: GLOB
                  pattern: release-\\d+
          config:
            project_repos:
            - repo: https://github.com/eosc-synergy/sqaaas-api-spec
              branch: master
            - repo: https://github.com/eosc-synergy/sqaaas-api-spec
              branch: master
            credentials:
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
          timeout: 1
        composer_data:
          services:
            key:
              image:
                registry:
                  push: true
                  credential_id: my-dockerhub-cred
                name: eoscsynergy/sqaaas-api-spec:1.0.0
              hostname: sqaaas-host
              environment:
                JPL_IGNOREFAILURES: defined
                JPL_DOCKERPUSH: docs service1 service4
              build:
                args:
                  key: args
                dockerfile: Dockerfile-alternate
                context: ./dir
              volumes:
              - source: ./
                type: bind
                target: ./sqaaas-build
              - source: ./
                type: bind
                target: ./sqaaas-build
              oneshot: true
              command: sleep 600000
          version: "3.7"
        name: sqaaas-api-spec
        id: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
        jenkinsfile_data:
          stages:
          - pipeline_config:
              credentials_id: userpass_dockerhub
              base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
              base_repository: master
              jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
              config_file: ./.sqa/config.yml
            when:
              branches:
              - master
              - master
          - pipeline_config:
              credentials_id: userpass_dockerhub
              base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
              base_repository: master
              jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
              config_file: ./.sqa/config.yml
            when:
              branches:
              - master
              - master
      properties:
        id:
          description: ID of the criterion
          example: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
          readOnly: true
          title: id
          type: string
        name:
          description: Name that identifies the pipeline
          example: sqaaas-api-spec
          format: "[A-Za-z0-9_.-]"
          title: name
          type: string
        config_data:
          description: Details about the pipeline configuration
          items:
            $ref: '#/components/schemas/JePL_config'
          title: config_data
          type: array
        composer_data:
          $ref: '#/components/schemas/JePL_composer'
        jenkinsfile_data:
          $ref: '#/components/schemas/JePL_jenkinsfile'
      title: Pipeline
      type: object
    Pipeline_assessment:
      properties:
        repo_code:
          $ref: '#/components/schemas/Repository'
        repo_docs:
          $ref: '#/components/schemas/Repository'
      required:
      - repo_code
      title: Pipeline_assessment
      type: object
    AssessmentOutputToolCI:
      description: Details of the CI build where the tool was executed
      example:
        stdout_command:
        - stdout_command
        - stdout_command
        name: name
        stdout_text: stdout_text
        url: https://openapi-generator.tech
        status: SUCCESS
      properties:
        name:
          description: Name of the stage the tool was executed
          title: name
          type: string
        status:
          description: Exit status of the stage where the tool ran
          enum:
          - SUCCESS
          - FAILURE
          title: status
          type: string
        stdout_command:
          description: List of commands executed in the stage
          items:
            type: string
          title: stdout_command
          type: array
        stdout_text:
          description: Output of the tool execution
          title: stdout_text
          type: string
        url:
          description: URL of the build's stage output
          format: uri
          title: url
          type: string
      title: AssessmentOutputToolCI
      type: object
    AssessmentOutputValidatorTool:
      description: Details about the tool
      example:
        level: REQUIRED
        ci:
          stdout_command:
          - stdout_command
          - stdout_command
          name: name
          stdout_text: stdout_text
          url: https://openapi-generator.tech
          status: SUCCESS
        name: licensee
      properties:
        name:
          description: Name of the tool
          example: licensee
          title: name
          type: string
        ci:
          $ref: '#/components/schemas/AssessmentOutputToolCI'
        level:
          description: Level of criticality of the tool
          enum:
          - REQUIRED
          - RECOMMENDED
          - OPTIONAL
          title: level
          type: string
      title: AssessmentOutputValidatorTool
      type: object
    AssessmentOutputValidatorStandard:
      description: Details about the quality standard that defines the given subcriterion
      example:
        title: A set of Common Software Quality Assurance Baseline Criteria for Research
          Projects
        version: v4.0
        url: https://indigo-dc.github.io/sqa-baseline/
      properties:
        title:
          description: Standard title
          example: A set of Common Software Quality Assurance Baseline Criteria for
            Research Projects
          title: title
          type: string
        version:
          description: Standard version
          example: v4.0
          title: version
          type: string
        url:
          description: URL containing the standard's specification
          example: https://indigo-dc.github.io/sqa-baseline/
          format: uri
          title: url
          type: string
      title: AssessmentOutputValidatorStandard
      type: object
    AssessmentOutputValidator:
      example:
        valid: true
        standard:
          title: A set of Common Software Quality Assurance Baseline Criteria for
            Research Projects
          version: v4.0
          url: https://indigo-dc.github.io/sqa-baseline/
        plugin:
          name: report2sqaaas-plugin-licensee
          version: 1.0.0
        message: README file does not exist
        data_unstructured: "{}"
        tool:
          level: REQUIRED
          ci:
            stdout_command:
            - stdout_command
            - stdout_command
            name: name
            stdout_text: stdout_text
            url: https://openapi-generator.tech
            status: SUCCESS
          name: licensee
      properties:
        valid:
          description: Validity of the subcriterion according to the tool
          title: valid
          type: boolean
        message:
          description: Short statement about the evidence found
          example: README file does not exist
          title: message
          type: string
        plugin:
          $ref: '#/components/schemas/AssessmentOutputValidator_plugin'
        tool:
          $ref: '#/components/schemas/AssessmentOutputValidatorTool'
        standard:
          $ref: '#/components/schemas/AssessmentOutputValidatorStandard'
        data_unstructured:
          description: Any unstructured data provided by the tool
          title: data_unstructured
          type: object
      title: AssessmentOutputValidator
      type: object
    AssessmentOutputSubcriteria:
      description: ID of the subcriterion
      example:
        valid: true
        evidence:
        - valid: true
          standard:
            title: A set of Common Software Quality Assurance Baseline Criteria for
              Research Projects
            version: v4.0
            url: https://indigo-dc.github.io/sqa-baseline/
          plugin:
            name: report2sqaaas-plugin-licensee
            version: 1.0.0
          message: README file does not exist
          data_unstructured: "{}"
          tool:
            level: REQUIRED
            ci:
              stdout_command:
              - stdout_command
              - stdout_command
              name: name
              stdout_text: stdout_text
              url: https://openapi-generator.tech
              status: SUCCESS
            name: licensee
        - valid: true
          standard:
            title: A set of Common Software Quality Assurance Baseline Criteria for
              Research Projects
            version: v4.0
            url: https://indigo-dc.github.io/sqa-baseline/
          plugin:
            name: report2sqaaas-plugin-licensee
            version: 1.0.0
          message: README file does not exist
          data_unstructured: "{}"
          tool:
            level: REQUIRED
            ci:
              stdout_command:
              - stdout_command
              - stdout_command
              name: name
              stdout_text: stdout_text
              url: https://openapi-generator.tech
              status: SUCCESS
            name: licensee
        description: All code repositories MUST have a README file
      properties:
        description:
          description: Short statement about the goal of the given subcriterion
          example: All code repositories MUST have a README file
          title: description
          type: string
        valid:
          description: Overall validity of the subcriterion
          title: valid
          type: boolean
        evidence:
          description: Evidence obtained by the tools for the given subcriterion
          items:
            $ref: '#/components/schemas/AssessmentOutputValidator'
          title: evidence
          type: array
      title: AssessmentOutputSubcriteria
      type: object
    BadgeAssertion:
      description: Badge data as obtained from Open Badge's Badgr implementation
      example:
        createdAt: 2021-04-07T10:34:02.96Z
        image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
        createdBy: e3h49VVbQRKQphuAAmxpgQ
        recipient:
          identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
          hashed: true
          plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
          type: email
        openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
        badgeClass: sBS3EsJQRAC0ENTmvETtQw
        issuer: aS1lWKgIR4u8bGjPZUzAyg
        issuedOn: 2021-04-07T10:07:00Z
      properties:
        openBadgeID:
          example: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
          format: uri
          title: openBadgeID
          type: string
        createdAt:
          example: 2021-04-07T10:34:02.96Z
          format: date-time
          title: createdAt
          type: string
        createdBy:
          example: e3h49VVbQRKQphuAAmxpgQ
          title: createdBy
          type: string
        badgeClass:
          example: sBS3EsJQRAC0ENTmvETtQw
          title: badgeClass
          type: string
        issuer:
          example: aS1lWKgIR4u8bGjPZUzAyg
          title: issuer
          type: string
        image:
          example: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
          format: uri
          title: image
          type: string
        recipient:
          $ref: '#/components/schemas/BadgeAssertion_recipient'
        issuedOn:
          example: 2021-04-07T10:07:00Z
          format: date-time
          title: issuedOn
          type: string
      title: BadgeAssertion
      type: object
    Badge:
      example:
        data:
          createdAt: 2021-04-07T10:34:02.96Z
          image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
          createdBy: e3h49VVbQRKQphuAAmxpgQ
          recipient:
            identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
            hashed: true
            plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
            type: email
          openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
          badgeClass: sBS3EsJQRAC0ENTmvETtQw
          issuer: aS1lWKgIR4u8bGjPZUzAyg
          issuedOn: 2021-04-07T10:07:00Z
        share: <html>..</html>
        verification_url: https://openapi-generator.tech
      properties:
        data:
          $ref: '#/components/schemas/BadgeAssertion'
        share:
          description: Badge's HTML block that can be embedded in websites
          example: <html>..</html>
          title: share
          type: string
        verification_url:
          description: URL the portal where the badge can be verified
          format: uri
          title: verification_url
          type: string
      title: Badge
      type: object
    AssessmentOutput:
      example:
        badge:
          software:
            data:
              createdAt: 2021-04-07T10:34:02.96Z
              image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
              createdBy: e3h49VVbQRKQphuAAmxpgQ
              recipient:
                identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
                hashed: true
                plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
                type: email
              openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
              badgeClass: sBS3EsJQRAC0ENTmvETtQw
              issuer: aS1lWKgIR4u8bGjPZUzAyg
              issuedOn: 2021-04-07T10:07:00Z
            share: <html>..</html>
            verification_url: https://openapi-generator.tech
          services:
            data:
              createdAt: 2021-04-07T10:34:02.96Z
              image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
              createdBy: e3h49VVbQRKQphuAAmxpgQ
              recipient:
                identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
                hashed: true
                plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
                type: email
              openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
              badgeClass: sBS3EsJQRAC0ENTmvETtQw
              issuer: aS1lWKgIR4u8bGjPZUzAyg
              issuedOn: 2021-04-07T10:07:00Z
            share: <html>..</html>
            verification_url: https://openapi-generator.tech
          fair:
            data:
              createdAt: 2021-04-07T10:34:02.96Z
              image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
              createdBy: e3h49VVbQRKQphuAAmxpgQ
              recipient:
                identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
                hashed: true
                plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
                type: email
              openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
              badgeClass: sBS3EsJQRAC0ENTmvETtQw
              issuer: aS1lWKgIR4u8bGjPZUzAyg
              issuedOn: 2021-04-07T10:07:00Z
            share: <html>..</html>
            verification_url: https://openapi-generator.tech
        report:
          key:
            valid: false
            subcriteria:
              key:
                valid: true
                evidence:
                - valid: true
                  standard:
                    title: A set of Common Software Quality Assurance Baseline Criteria
                      for Research Projects
                    version: v4.0
                    url: https://indigo-dc.github.io/sqa-baseline/
                  plugin:
                    name: report2sqaaas-plugin-licensee
                    version: 1.0.0
                  message: README file does not exist
                  data_unstructured: "{}"
                  tool:
                    level: REQUIRED
                    ci:
                      stdout_command:
                      - stdout_command
                      - stdout_command
                      name: name
                      stdout_text: stdout_text
                      url: https://openapi-generator.tech
                      status: SUCCESS
                    name: licensee
                - valid: true
                  standard:
                    title: A set of Common Software Quality Assurance Baseline Criteria
                      for Research Projects
                    version: v4.0
                    url: https://indigo-dc.github.io/sqa-baseline/
                  plugin:
                    name: report2sqaaas-plugin-licensee
                    version: 1.0.0
                  message: README file does not exist
                  data_unstructured: "{}"
                  tool:
                    level: REQUIRED
                    ci:
                      stdout_command:
                      - stdout_command
                      - stdout_command
                      name: name
                      stdout_text: stdout_text
                      url: https://openapi-generator.tech
                      status: SUCCESS
                    name: licensee
                description: All code repositories MUST have a README file
            filtered_reason:
            - filtered_reason
            - filtered_reason
      properties:
        report:
          additionalProperties:
            $ref: '#/components/schemas/AssessmentOutput_report_addl_props'
          title: report
          type: object
        badge:
          $ref: '#/components/schemas/AssessmentOutput_badge'
      title: AssessmentOutput
      type: object
    UpstreamError:
      properties:
        upstream_status:
          title: upstream_status
          type: integer
        upstream_reason:
          title: upstream_reason
          type: string
      required:
      - upstream_reason
      - upstream_status
      title: UpstreamError
      type: object
    CriterionOutput:
      additionalProperties:
        items:
          $ref: '#/components/schemas/CriterionOutput_addl_props_inner'
        type: array
      example:
        QC.Lic:
        - status: SUCCESS
          stdout_command: + docker-compose -f .sqa/docker-compose.yml --project-directory
            /jenkins/workspace/ava-maven-app.assess.sqaaas_main/ exec -T qc.lic_boozy-smalt-maltese
            /usr/bin/env sh .sqa/script.paltry-taupe-reindeer.sh
          tool: licensee
          validator: licensee
          validation:
            valid: true
            data_unstructured: {}
      type: object
    inline_response_201:
      example:
        id: id
      properties:
        id:
          description: UUID identifying the pipeline
          title: id
          type: string
      title: inline_response_201
      type: object
    inline_response_200:
      example:
        file_name: "{\"file_name\":\"config.yml\"}"
        content:
          key:
            repos:
            - container: testing
              repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
              tox:
                tox_file: tox.ini
                testenv:
                - cover
              commands:
              - mvn checkstyle:check
              tool:
                args:
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                docs: https://openapi-generator.tech
                name: name
                lang: lang
                jepl_support: true
                executable: executable
                docker:
                  image: image
                  dockerfile: dockerfile
                  reviewed: 2000-01-23
                  oneshot: true
            - container: testing
              repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
              tox:
                tox_file: tox.ini
                testenv:
                - cover
              commands:
              - mvn checkstyle:check
              tool:
                args:
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                - summary: summary
                  args:
                  - null
                  - null
                  repeatable: false
                  selectable: true
                  format: string
                  description: Detect the license of the given project
                  type: subcommand
                  value: detect
                  option: option
                docs: https://openapi-generator.tech
                name: name
                lang: lang
                jepl_support: true
                executable: executable
                docker:
                  image: image
                  dockerfile: dockerfile
                  reviewed: 2000-01-23
                  oneshot: true
            when:
              building_tag: true
              branch:
                comparator: GLOB
                pattern: release-\\d+
      properties:
        file_name:
          example: "{\"file_name\":\"config.yml\"}"
          title: file_name
          type: string
        content:
          additionalProperties:
            $ref: '#/components/schemas/CriterionBuild_addl_props'
          description: Definition of software and service criteria to be run by the
            pipeline
          title: sqa_criteria
          type: object
      title: inline_response_200
      type: object
    inline_response_200_1:
      example:
        file_name: script.sh
        content: |-
          (
          cd workdir ; npm install
          )
      properties:
        file_name:
          example: script.sh
          title: file_name
          type: string
        content:
          example: |-
            (
            cd workdir ; npm install
            )
          title: content
          type: string
      title: inline_response_200_1
      type: object
    inline_response_200_2:
      example:
        file_name: "{\"file_name\":\"docker-compose.yml\"}"
        content:
          services:
            key:
              image:
                registry:
                  push: true
                  credential_id: my-dockerhub-cred
                name: eoscsynergy/sqaaas-api-spec:1.0.0
              hostname: sqaaas-host
              environment:
                JPL_IGNOREFAILURES: defined
                JPL_DOCKERPUSH: docs service1 service4
              build:
                args:
                  key: args
                dockerfile: Dockerfile-alternate
                context: ./dir
              volumes:
              - source: ./
                type: bind
                target: ./sqaaas-build
              - source: ./
                type: bind
                target: ./sqaaas-build
              oneshot: true
              command: sleep 600000
          version: "3.7"
      properties:
        file_name:
          example: "{\"file_name\":\"docker-compose.yml\"}"
          title: file_name
          type: string
        content:
          $ref: '#/components/schemas/JePL_composer'
      title: inline_response_200_2
      type: object
    inline_response_200_3:
      example: "{\"file_name\":\"Jenkinsfile\",\"content\":\"@Library(['github.com/indigo-dc/jenkins-pipeline-library@release/2.1.0'])\
        \ _\\n\\ndef projectConfig\\n\\npipeline {\\n    agent any\\n\\n    stages\
        \ {\\n        stage('SQA baseline criterion: QC.Sty') {\\n            when\
        \ {\\n                branch pattern: 'sqaaas', comparator: ''\\n        \
        \    }\\n            steps {\\n                script {\\n               \
        \     projectConfig = pipelineConfig(\\n                        configFile:\
        \ '.sqa/config.yml',\\n                        scmConfigs: [ localBranch:\
        \ true ]\\n                    )\\n                    buildStages(projectConfig)\\\
        n                }\\n            }\\n            post {\\n               \
        \ cleanup {\\n                    cleanWs()\\n                }\\n       \
        \     }\\n        }\\n        stage('SQA baseline criterion: QC.Doc') {\\\
        n            when {\\n                branch pattern: 'build', comparator:\
        \ ''\\n            }\\n            steps {\\n                script {\\n \
        \                   projectConfig = pipelineConfig(\\n                   \
        \     configFile: '.sqa/config.snappy-peach-chicken.yml',\\n             \
        \           scmConfigs: [ localBranch: true ]\\n                    )\\n \
        \                   buildStages(projectConfig)\\n                }\\n    \
        \        }\\n            post {\\n                cleanup {\\n           \
        \         cleanWs()\\n                }\\n            }\\n        }\\n   \
        \ }\\n}\"}"
      properties:
        file_name:
          example: "{\"file_name\":\"Jenkinsfile\"}"
          type: string
        content:
          type: string
      title: inline_response_200_3
      type: object
    inline_response_200_4:
      example:
        openbadge_id: https://openapi-generator.tech
        build_status: success
        build_url: https://openapi-generator.tech
      properties:
        build_url:
          format: uri
          title: build_url
          type: string
        build_status:
          enum:
          - success
          - failure
          - aborted
          - not_built
          - unstable
          - waiting_scan_org
          title: build_status
          type: string
        openbadge_id:
          format: uri
          title: openbadge_id
          type: string
      title: inline_response_200_4
      type: object
    inline_object:
      properties:
        repo:
          description: URL of the upstream repo
          format: uri
          title: repo
          type: string
        branch:
          description: Brach from the upstream repo used as the base for the pull
            request
          title: branch
          type: string
      required:
      - repo
      title: inline_object
      type: object
    inline_response_200_5:
      example:
        pull_request_url: https://openapi-generator.tech
      properties:
        pull_request_url:
          format: uri
          title: pull_request_url
          type: string
      title: inline_response_200_5
      type: object
    Tool_docker:
      example:
        image: image
        dockerfile: dockerfile
        reviewed: 2000-01-23
        oneshot: true
      properties:
        image:
          title: image
          type: string
        dockerfile:
          title: dockerfile
          type: string
        reviewed:
          format: date
          title: reviewed
          type: string
        oneshot:
          default: true
          title: oneshot
          type: boolean
      title: Tool_docker
      type: object
    Criterion_description:
      description: Details about the criterion
      example:
        msg: msg
        docs: https://openapi-generator.tech
        improves: improves
      properties:
        msg:
          description: Short statemente about the criterion's goal
          title: msg
          type: string
        improves:
          description: Comma-separated list of software/service characteristics addressed
            by the given criterion
          title: improves
          type: string
        docs:
          description: URL with additional information about the criterion
          format: uri
          title: docs
          type: string
      title: Criterion_description
      type: object
    CriterionBuild_addl_props_repos_inner:
      additionalProperties: false
      example:
        container: testing
        repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
        tox:
          tox_file: tox.ini
          testenv:
          - cover
        commands:
        - mvn checkstyle:check
        tool:
          args:
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          - summary: summary
            args:
            - null
            - null
            repeatable: false
            selectable: true
            format: string
            description: Detect the license of the given project
            type: subcommand
            value: detect
            option: option
          docs: https://openapi-generator.tech
          name: name
          lang: lang
          jepl_support: true
          executable: executable
          docker:
            image: image
            dockerfile: dockerfile
            reviewed: 2000-01-23
            oneshot: true
      properties:
        repo_url:
          description: URL of the repository
          example: https://github.com/eosc-synergy/sqaaas-api-spec
          format: uri
          title: repo_url
          type: string
        container:
          description: Container name as defined in the JePL composer's file (i.e.
            docker-compose.yml)
          example: testing
          title: container
          type: string
        commands:
          description: List of commands to execute
          example:
          - mvn checkstyle:check
          items:
            minLength: 1
            type: string
          title: Commands_simplified
          type: array
        tox:
          $ref: '#/components/schemas/Tox_simplified'
        tool:
          $ref: '#/components/schemas/Tool'
      title: CriterionBuild_addl_props_repos_inner
      type: object
    CriterionBuild_addl_props_when:
      additionalProperties: false
      description: "Requirements that should take into account to execute the pipeline,\
        \ such as branch/tags names"
      example:
        building_tag: true
        branch:
          comparator: GLOB
          pattern: release-\\d+
      properties:
        branch:
          $ref: '#/components/schemas/When_branch'
        building_tag:
          title: When_building_tag
          type: boolean
      title: CriterionBuild_addl_props_when
      type: object
    CriterionBuild_addl_props:
      description: ID of the criterion
      example:
        repos:
        - container: testing
          repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
          tox:
            tox_file: tox.ini
            testenv:
            - cover
          commands:
          - mvn checkstyle:check
          tool:
            args:
            - summary: summary
              args:
              - null
              - null
              repeatable: false
              selectable: true
              format: string
              description: Detect the license of the given project
              type: subcommand
              value: detect
              option: option
            - summary: summary
              args:
              - null
              - null
              repeatable: false
              selectable: true
              format: string
              description: Detect the license of the given project
              type: subcommand
              value: detect
              option: option
            docs: https://openapi-generator.tech
            name: name
            lang: lang
            jepl_support: true
            executable: executable
            docker:
              image: image
              dockerfile: dockerfile
              reviewed: 2000-01-23
              oneshot: true
        - container: testing
          repo_url: https://github.com/eosc-synergy/sqaaas-api-spec
          tox:
            tox_file: tox.ini
            testenv:
            - cover
          commands:
          - mvn checkstyle:check
          tool:
            args:
            - summary: summary
              args:
              - null
              - null
              repeatable: false
              selectable: true
              format: string
              description: Detect the license of the given project
              type: subcommand
              value: detect
              option: option
            - summary: summary
              args:
              - null
              - null
              repeatable: false
              selectable: true
              format: string
              description: Detect the license of the given project
              type: subcommand
              value: detect
              option: option
            docs: https://openapi-generator.tech
            name: name
            lang: lang
            jepl_support: true
            executable: executable
            docker:
              image: image
              dockerfile: dockerfile
              reviewed: 2000-01-23
              oneshot: true
        when:
          building_tag: true
          branch:
            comparator: GLOB
            pattern: release-\\d+
      minProperties: 1
      properties:
        repos:
          description: List of repositories (from config:project_repos) for which
            the given criterion will be checked
          items:
            $ref: '#/components/schemas/CriterionBuild_addl_props_repos_inner'
          title: repos
          type: array
        when:
          $ref: '#/components/schemas/CriterionBuild_addl_props_when'
      required:
      - repos
      title: CriterionBuild_addl_props
      type: object
    JePL_config_config:
      description: JePL's main configuration
      example:
        project_repos:
        - repo: https://github.com/eosc-synergy/sqaaas-api-spec
          branch: master
        - repo: https://github.com/eosc-synergy/sqaaas-api-spec
          branch: master
        credentials:
        - password_var: GIT_PASS
          username_var: GIT_USER
          id: my-dockerhub-token
          type: username_password
        - password_var: GIT_PASS
          username_var: GIT_USER
          id: my-dockerhub-token
          type: username_password
      properties:
        project_repos:
          description: Set of repositories to be fetched by the pipeline (may exclude
            the repository where the pipeline is stored)
          items:
            $ref: '#/components/schemas/Repository'
          title: project_repos
          type: array
        credentials:
          description: List of credentials required to access successfuly to the resources
            (such as repositories) managed by the pipeline
          items:
            $ref: '#/components/schemas/Creds_user_pass'
          title: credentials
          type: array
      title: JePL_config_config
      type: object
    ServiceDockerCompose_addl_props_build:
      example:
        args:
          key: args
        dockerfile: Dockerfile-alternate
        context: ./dir
      properties:
        context:
          example: ./dir
          title: context
          type: string
        dockerfile:
          example: Dockerfile-alternate
          title: dockerfile
          type: string
        args:
          additionalProperties:
            type: string
          title: args
          type: object
      title: ServiceDockerCompose_addl_props_build
      type: object
    ServiceDockerCompose_addl_props_image_registry:
      example:
        push: true
        credential_id: my-dockerhub-cred
      properties:
        push:
          title: push
          type: boolean
        credential_id:
          example: my-dockerhub-cred
          title: credential_id
          type: string
      title: ServiceDockerCompose_addl_props_image_registry
      type: object
    ServiceDockerCompose_addl_props_image:
      example:
        registry:
          push: true
          credential_id: my-dockerhub-cred
        name: eoscsynergy/sqaaas-api-spec:1.0.0
      properties:
        name:
          example: eoscsynergy/sqaaas-api-spec:1.0.0
          title: name
          type: string
        registry:
          $ref: '#/components/schemas/ServiceDockerCompose_addl_props_image_registry'
      required:
      - name
      title: ServiceDockerCompose_addl_props_image
      type: object
    ServiceDockerCompose_addl_props_volumes_inner:
      example:
        source: ./
        type: bind
        target: ./sqaaas-build
      properties:
        type:
          enum:
          - bind
          title: type
          type: string
        source:
          example: ./
          title: source
          type: string
        target:
          example: ./sqaaas-build
          title: target
          type: string
      title: ServiceDockerCompose_addl_props_volumes_inner
      type: object
    ServiceDockerCompose_addl_props:
      example:
        image:
          registry:
            push: true
            credential_id: my-dockerhub-cred
          name: eoscsynergy/sqaaas-api-spec:1.0.0
        hostname: sqaaas-host
        environment:
          JPL_IGNOREFAILURES: defined
          JPL_DOCKERPUSH: docs service1 service4
        build:
          args:
            key: args
          dockerfile: Dockerfile-alternate
          context: ./dir
        volumes:
        - source: ./
          type: bind
          target: ./sqaaas-build
        - source: ./
          type: bind
          target: ./sqaaas-build
        oneshot: true
        command: sleep 600000
      properties:
        build:
          $ref: '#/components/schemas/ServiceDockerCompose_addl_props_build'
        image:
          $ref: '#/components/schemas/ServiceDockerCompose_addl_props_image'
        hostname:
          example: sqaaas-host
          title: hostname
          type: string
        volumes:
          items:
            $ref: '#/components/schemas/ServiceDockerCompose_addl_props_volumes_inner'
          title: volumes
          type: array
        command:
          example: sleep 600000
          title: command
          type: string
        environment:
          additionalProperties:
            type: string
          description: Environment variables to be used at pipeline runtime
          example:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          title: Environment
          type: object
        oneshot:
          default: true
          title: oneshot
          type: boolean
      title: ServiceDockerCompose_addl_props
      type: object
    JePL_jenkinsfile_stagesItems_when:
      example:
        branches:
        - master
        - master
      properties:
        branches:
          items:
            example: master
            type: string
          title: branches
          type: array
      title: JePL_jenkinsfile_stagesItems_when
      type: object
    JePL_jenkinsfile_stagesItems_pipeline_config:
      example:
        credentials_id: userpass_dockerhub
        base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
        base_repository: master
        jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
        config_file: ./.sqa/config.yml
      properties:
        config_file:
          example: ./.sqa/config.yml
          title: config_file
          type: string
        base_repository:
          example: master
          title: base_repository
          type: string
        base_branch:
          example: https://github.com/eosc-synergy/sqaaas-api-spec
          title: base_branch
          type: string
        credentials_id:
          example: userpass_dockerhub
          title: credentials_id
          type: string
        jepl_validator_docker_image:
          example: eoscsynergy/jpl-validator:1.1.0
          title: jepl_validator_docker_image
          type: string
      title: JePL_jenkinsfile_stagesItems_pipeline_config
      type: object
    JePL_jenkinsfile_stages_inner:
      example:
        pipeline_config:
          credentials_id: userpass_dockerhub
          base_branch: https://github.com/eosc-synergy/sqaaas-api-spec
          base_repository: master
          jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
          config_file: ./.sqa/config.yml
        when:
          branches:
          - master
          - master
      properties:
        when:
          $ref: '#/components/schemas/JePL_jenkinsfile_stagesItems_when'
        pipeline_config:
          $ref: '#/components/schemas/JePL_jenkinsfile_stagesItems_pipeline_config'
      title: JePL_jenkinsfile_stages_inner
      type: object
    AssessmentOutputValidator_plugin:
      description: Details about the tool's validator plugin being executed
      example:
        name: report2sqaaas-plugin-licensee
        version: 1.0.0
      properties:
        name:
          description: Name of the plugin
          example: report2sqaaas-plugin-licensee
          title: name
          type: string
        version:
          description: Version of the plugin
          example: 1.0.0
          title: version
          type: string
      title: AssessmentOutputValidator_plugin
      type: object
    BadgeAssertion_recipient:
      example:
        identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
        hashed: true
        plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
        type: email
      properties:
        identity:
          example: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
          title: identity
          type: string
        hashed:
          title: hashed
          type: boolean
        type:
          enum:
          - email
          - openBadgeId
          - telephone
          - url
          title: type
          type: string
        plaintextIdentity:
          example: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
          title: plaintextIdentity
          type: string
      title: BadgeAssertion_recipient
      type: object
    AssessmentOutput_report_addl_props:
      description: ID of the criterion
      example:
        valid: false
        subcriteria:
          key:
            valid: true
            evidence:
            - valid: true
              standard:
                title: A set of Common Software Quality Assurance Baseline Criteria
                  for Research Projects
                version: v4.0
                url: https://indigo-dc.github.io/sqa-baseline/
              plugin:
                name: report2sqaaas-plugin-licensee
                version: 1.0.0
              message: README file does not exist
              data_unstructured: "{}"
              tool:
                level: REQUIRED
                ci:
                  stdout_command:
                  - stdout_command
                  - stdout_command
                  name: name
                  stdout_text: stdout_text
                  url: https://openapi-generator.tech
                  status: SUCCESS
                name: licensee
            - valid: true
              standard:
                title: A set of Common Software Quality Assurance Baseline Criteria
                  for Research Projects
                version: v4.0
                url: https://indigo-dc.github.io/sqa-baseline/
              plugin:
                name: report2sqaaas-plugin-licensee
                version: 1.0.0
              message: README file does not exist
              data_unstructured: "{}"
              tool:
                level: REQUIRED
                ci:
                  stdout_command:
                  - stdout_command
                  - stdout_command
                  name: name
                  stdout_text: stdout_text
                  url: https://openapi-generator.tech
                  status: SUCCESS
                name: licensee
            description: All code repositories MUST have a README file
        filtered_reason:
        - filtered_reason
        - filtered_reason
      properties:
        valid:
          default: false
          description: Overall validity of the criterion
          title: valid
          type: boolean
        filtered_reason:
          default: []
          description: Contains the reason why the criterion was filtered out (if
            applicable)
          items:
            type: string
          title: filtered_reason
          type: array
        subcriteria:
          additionalProperties:
            $ref: '#/components/schemas/AssessmentOutputSubcriteria'
          title: subcriteria
          type: object
      title: AssessmentOutput_report_addl_props
      type: object
    AssessmentOutput_badge:
      example:
        software:
          data:
            createdAt: 2021-04-07T10:34:02.96Z
            image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
            createdBy: e3h49VVbQRKQphuAAmxpgQ
            recipient:
              identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
              hashed: true
              plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
              type: email
            openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
            badgeClass: sBS3EsJQRAC0ENTmvETtQw
            issuer: aS1lWKgIR4u8bGjPZUzAyg
            issuedOn: 2021-04-07T10:07:00Z
          share: <html>..</html>
          verification_url: https://openapi-generator.tech
        services:
          data:
            createdAt: 2021-04-07T10:34:02.96Z
            image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
            createdBy: e3h49VVbQRKQphuAAmxpgQ
            recipient:
              identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
              hashed: true
              plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
              type: email
            openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
            badgeClass: sBS3EsJQRAC0ENTmvETtQw
            issuer: aS1lWKgIR4u8bGjPZUzAyg
            issuedOn: 2021-04-07T10:07:00Z
          share: <html>..</html>
          verification_url: https://openapi-generator.tech
        fair:
          data:
            createdAt: 2021-04-07T10:34:02.96Z
            image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
            createdBy: e3h49VVbQRKQphuAAmxpgQ
            recipient:
              identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
              hashed: true
              plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
              type: email
            openBadgeID: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
            badgeClass: sBS3EsJQRAC0ENTmvETtQw
            issuer: aS1lWKgIR4u8bGjPZUzAyg
            issuedOn: 2021-04-07T10:07:00Z
          share: <html>..</html>
          verification_url: https://openapi-generator.tech
      properties:
        software:
          $ref: '#/components/schemas/Badge'
        services:
          $ref: '#/components/schemas/Badge'
        fair:
          $ref: '#/components/schemas/Badge'
      title: AssessmentOutput_badge
      type: object
    CriterionOutput_addl_propsItems_validation:
      properties:
        valid:
          title: valid
          type: boolean
        data_unstructured:
          title: data_unstructured
          type: object
      title: CriterionOutput_addl_propsItems_validation
      type: object
    CriterionOutput_addl_props_inner:
      properties:
        status:
          enum:
          - SUCCESS
          - FAILED
          title: status
          type: string
        stdout_command:
          title: stdout_command
          type: string
        stdout_text:
          title: stdout_text
          type: string
        tool:
          title: tool
          type: string
        validator:
          title: validator
          type: string
        validation:
          $ref: '#/components/schemas/CriterionOutput_addl_propsItems_validation'
      title: CriterionOutput_addl_props_inner
      type: object
