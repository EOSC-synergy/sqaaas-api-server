openapi: 3.0.0
info:
  description: OpenAPI specification for the Software and Service Quality Assurance
    as a Service (SQAaaS) component.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: SQAaaS API
  version: 1.1.0
servers:
- description: Main (production) API server
  url: http://api.sqaaas.eosc-synergy.eu/v1
- description: Staging API server for testing
  url: https://api-staging.sqaaas.eosc-synergy.eu
- description: Development API server (mock server)
  url: https://api-dev.sqaaas.eosc-synergy.eu
paths:
  /criteria:
    get:
      operationId: get_criteria
      parameters:
      - description: Get data from a specific criterion
        explode: true
        in: query
        name: criterion_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Criterion'
                type: array
          description: Successful operation
        "400":
          description: Invalid criterion supplied
        "404":
          description: Criterion not found
      summary: Returns data about criteria
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline:
    get:
      description: |
        Returns the list of IDs for the defined pipelines.
      operationId: get_pipelines
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pipeline'
                type: array
          description: Successful operation
      summary: Gets pipeline IDs.
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |
        Provides a ready-to-use Jenkins pipeline based on the v2 series of jenkins-pipeline-library.
      operationId: add_pipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              example:
                id: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: Created
          links:
            get_pipeline_by_pipeline_id:
              description: |
                The `id` value returned in the response can be used as the `pipeline_id` parameter in `GET /pipeline/{pipeline_id}`.
              operationId: get_pipeline_by_id
              parameters:
                pipeline_id: $response.body#/id
        "400":
          description: Request failed validation
      summary: Creates a pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/{pipeline_id}:
    delete:
      operationId: delete_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Pipeline successfully deleted
        "400":
          description: Request failed validation
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Delete pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      operationId: get_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Find pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      operationId: update_pipeline_by_id
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Pipeline successfully updated
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Update pipeline by ID
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/{pipeline_id}/badge:
    get:
      description: |
        Returns the badge data associated with the pipeline.
      operationId: get_badge
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      - description: Returns the shared version of the badge in a specific format
        explode: true
        in: query
        name: share
        required: false
        schema:
          enum:
          - html
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Badge'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Badge not issued
      summary: Gets badge data associated with the given pipeline
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |
        Uses Badgr API to issue a badge after successful pipeline execution.
      operationId: issue_badge
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Pipeline has not been successfully executed
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Issues a quality badge.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/composer:
    get:
      description: |
        Returns the content of JePL's docker-compose.yml file.
      operationId: get_pipeline_composer
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_composer'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets composer configuration used by the pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/composer/jepl:
    get:
      description: |
        Returns the content of JePL's composer file.
      operationId: get_pipeline_composer_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets JePL composer configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/compressed_files:
    get:
      description: |
        Obtains the generated JePL files in compressed format.
      operationId: get_compressed_files
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: ZIP fle with JePL files
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Get JePL files in compressed format.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config:
    get:
      description: |
        Returns the content of JePL's config.yml file.
      operationId: get_pipeline_config
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_config'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets pipeline's main configuration.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config/jepl:
    get:
      description: |
        Returns the content of JePL's config file.
      operationId: get_pipeline_config_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets JePL config configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/config/scripts:
    get:
      description: |
        Returns the content of the list of scripts generated for the commands builder.
      operationId: get_pipeline_commands_scripts
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets the commands builder scripts
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/jenkinsfile:
    get:
      description: |
        Returns the content of JePL's Jenkinsfile file.
      operationId: get_pipeline_jenkinsfile
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/JePL_jenkinsfile'
                type: array
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets Jenkins pipeline definition used by the pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/jenkinsfile/jepl:
    get:
      description: |
        Returns the content of Jenkinsfile file for the given pipeline.
      operationId: get_pipeline_jenkinsfile_jepl
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
      summary: Gets Jenkins configuration for the given pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/pull_request:
    post:
      description: |
        Create a pull request with the generated JePL files.
      operationId: create_pull_request
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                repo:
                  description: URL of the upstream repo
                  format: uri
                  type: string
                branch:
                  description: Brach from the upstream repo used as the base for the
                    pull request
                  type: string
              required:
              - repo
              type: object
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              example:
                pull_request_url: https://github.com/EOSC-synergy/sqaaas-api-spec/pull/23
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Creates pull request with JePL files.
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /pipeline/{pipeline_id}/run:
    post:
      description: |
        Executes the given pipeline by means of the Jenkins API.
      operationId: run_pipeline
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to indicate whether a badge shall be issued if the pipeline
          succeds
        explode: true
        in: query
        name: issue_badge
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: URL of the upstream repository to fetch the code from
        explode: true
        in: query
        name: repo_url
        required: false
        schema:
          format: uri
          type: string
        style: form
      - description: Branch name of the upstream repository to fetch the code from
        explode: true
        in: query
        name: repo_branch
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Runs pipeline.
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /pipeline/{pipeline_id}/status:
    get:
      description: |
        Obtains the build URL in Jenkins for the given pipeline.
      operationId: get_pipeline_status
      parameters:
      - description: ID of the pipeline to get
        explode: false
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Successful operation
        "400":
          description: Invalid pipeline ID supplied
        "404":
          description: Pipeline not found
        "422":
          description: Pipeline has not been executed
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamError'
          description: |
            The server while acting as a gateway or a proxy, received
            an invalid response from the upstream server it accessed
            in attempting to fulfill the request.
      summary: Get pipeline status.
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  requestBodies:
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
  responses:
    BadGateway:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpstreamError'
      description: |
        The server while acting as a gateway or a proxy, received
        an invalid response from the upstream server it accessed
        in attempting to fulfill the request.
  schemas:
    ToolArg:
      example:
        type: subcommand
        description: Detect the license of the given project
        value: detect
        selectable: false
        repeatable: false
        args:
          description: Path to project's license
          format: string
          value: "."
      properties:
        type:
          description: type of argument
          enum:
          - subcommand
          - positional
          - optional
          type: string
        description:
          description: hint about what the command does
          type: string
        value:
          description: Value for the argument (can be of any type)
        option:
          description: Name of the option, in the event of optional arguments
          type: string
        summary:
          description: very brief (2/3 words) description (to be rendered by web clients)
          type: string
        format:
          description: The value format (to be rendered by web clients)
          enum:
          - string
          - array
          type: string
        selectable:
          default: true
          description: Whether the argument can be selected by the user (to be rendered
            by web clients)
          type: boolean
        repeatable:
          default: false
          description: Whether the argument can be repeated (to be rendered by web
            clients)
          type: boolean
        args:
          items:
            $ref: '#/components/schemas/ToolArg'
          type: array
      required:
      - description
      - type
      title: ToolArg
      type: object
    Tool:
      example:
        args:
        - type: subcommand
          description: Detect the license of the given project
          value: detect
          selectable: false
          repeatable: false
          args:
            description: Path to project's license
            format: string
            value: "."
        - type: subcommand
          description: Detect the license of the given project
          value: detect
          selectable: false
          repeatable: false
          args:
            description: Path to project's license
            format: string
            value: "."
        docs: https://openapi-generator.tech
        name: name
        lang: lang
        jepl_support: true
        executable: executable
        docker:
          image: image
          dockerfile: dockerfile
          reviewed: 2000-01-23
          oneshot: true
      properties:
        name:
          title: name
          type: string
        lang:
          title: lang
          type: string
        jepl_support:
          title: jepl_support
          type: boolean
        docs:
          format: uri
          title: docs
          type: string
        docker:
          $ref: '#/components/schemas/Tool_docker'
        executable:
          title: executable
          type: string
        args:
          items:
            $ref: '#/components/schemas/ToolArg'
          title: args
          type: array
      required:
      - docker
      - docs
      - lang
      - name
      title: Tool
      type: object
    Criterion:
      example:
        description:
          msg: msg
          docs: https://openapi-generator.tech
          improves: improves
        id: QC.Sty
        tools:
          key:
          - args:
            - type: subcommand
              description: Detect the license of the given project
              value: detect
              selectable: false
              repeatable: false
              args:
                description: Path to project's license
                format: string
                value: "."
            - type: subcommand
              description: Detect the license of the given project
              value: detect
              selectable: false
              repeatable: false
              args:
                description: Path to project's license
                format: string
                value: "."
            docs: https://openapi-generator.tech
            name: name
            lang: lang
            jepl_support: true
            executable: executable
            docker:
              image: image
              dockerfile: dockerfile
              reviewed: 2000-01-23
              oneshot: true
          - args:
            - type: subcommand
              description: Detect the license of the given project
              value: detect
              selectable: false
              repeatable: false
              args:
                description: Path to project's license
                format: string
                value: "."
            - type: subcommand
              description: Detect the license of the given project
              value: detect
              selectable: false
              repeatable: false
              args:
                description: Path to project's license
                format: string
                value: "."
            docs: https://openapi-generator.tech
            name: name
            lang: lang
            jepl_support: true
            executable: executable
            docker:
              image: image
              dockerfile: dockerfile
              reviewed: 2000-01-23
              oneshot: true
      properties:
        id:
          example: QC.Sty
          title: id
          type: string
        description:
          $ref: '#/components/schemas/Criterion_description'
        tools:
          additionalProperties:
            items:
              $ref: '#/components/schemas/Tool'
            type: array
          title: tools
          type: object
      title: Criterion
      type: object
    Repository:
      example:
      - repo: https://github.com/jenkins-docs/simple-java-maven-app
        branch: master
      properties:
        repo:
          example: https://github.com/jenkins-docs/simple-java-maven-app
          format: uri
          type: string
        branch:
          example: master
          type: string
      title: Repository
      type: object
    Creds_user_pass:
      example:
        password_var: GIT_PASS
        username_var: GIT_USER
        id: my-dockerhub-token
        type: username_password
      properties:
        id:
          example: my-dockerhub-token
          title: id
          type: string
        type:
          enum:
          - username_password
          title: type
          type: string
        username_var:
          example: GIT_USER
          title: username_var
          type: string
        password_var:
          example: GIT_PASS
          title: password_var
          type: string
      required:
      - id
      - password_var
      - username_var
      title: Creds_user_pass
      type: object
    Commands_simplified:
      example:
      - mvn checkstyle:check
      items:
        minLength: 1
        type: string
      type: array
    Tox_simplified:
      properties:
        testenv:
          default:
          - ALL
          example:
          - cover
          items:
            minLength: 1
            type: string
          title: testenv
          type: array
        tox_file:
          default: tox.ini
          example: tox.ini
          title: tox_file
          type: string
      title: Tox_simplified
      type: object
    When_branch:
      properties:
        pattern:
          minLength: 1
          title: pattern
          type: string
        comparator:
          default: GLOB
          enum:
          - EQUALS
          - GLOB
          - REGEXP
          title: comparator
          type: string
      required:
      - pattern
      title: When_branch
      type: object
    When_building_tag:
      type: boolean
    CriterionBuild:
      additionalProperties:
        minProperties: 1
        properties:
          repos:
            items:
              additionalProperties: false
              properties:
                repo_url:
                  format: uri
                  type: string
                container:
                  type: string
                commands:
                  $ref: '#/components/schemas/Commands_simplified'
                tox:
                  $ref: '#/components/schemas/Tox_simplified'
                tools:
                  items:
                    $ref: '#/components/schemas/Tool'
                  type: array
              type: object
            type: array
          when:
            additionalProperties: false
            properties:
              branch:
                $ref: '#/components/schemas/When_branch'
              building_tag:
                $ref: '#/components/schemas/When_building_tag'
            type: object
        required:
        - repos
        type: object
      example:
        QC.Sty:
          repos:
            simple-java-maven-app:
              container: checkstyle
              commands:
              - mvn checkstyle:check
          branch:
            pattern: release-\\d+
      title: sqa_criteria
      type: object
    Environment:
      additionalProperties:
        type: string
      example:
        JPL_IGNOREFAILURES: defined
        JPL_DOCKERPUSH: docs service1 service4
      title: environment
      type: object
    JePL_config:
      example:
        environment:
          JPL_IGNOREFAILURES: defined
          JPL_DOCKERPUSH: docs service1 service4
        sqa_criteria:
          QC.Sty:
            repos:
              simple-java-maven-app:
                container: checkstyle
                commands:
                - mvn checkstyle:check
            branch:
              pattern: release-\\d+
        config:
          project_repos:
          - - repo: https://github.com/jenkins-docs/simple-java-maven-app
              branch: master
          - - repo: https://github.com/jenkins-docs/simple-java-maven-app
              branch: master
          credentials:
          - password_var: GIT_PASS
            username_var: GIT_USER
            id: my-dockerhub-token
            type: username_password
          - password_var: GIT_PASS
            username_var: GIT_USER
            id: my-dockerhub-token
            type: username_password
        timeout: 1
      properties:
        config:
          $ref: '#/components/schemas/JePL_config_config'
        sqa_criteria:
          additionalProperties:
            minProperties: 1
            properties:
              repos:
                items:
                  additionalProperties: false
                  properties:
                    repo_url:
                      format: uri
                      type: string
                    container:
                      type: string
                    commands:
                      $ref: '#/components/schemas/Commands_simplified'
                    tox:
                      $ref: '#/components/schemas/Tox_simplified'
                    tools:
                      items:
                        $ref: '#/components/schemas/Tool'
                      type: array
                  type: object
                type: array
              when:
                additionalProperties: false
                properties:
                  branch:
                    $ref: '#/components/schemas/When_branch'
                  building_tag:
                    $ref: '#/components/schemas/When_building_tag'
                type: object
            required:
            - repos
            type: object
          example:
            QC.Sty:
              repos:
                simple-java-maven-app:
                  container: checkstyle
                  commands:
                  - mvn checkstyle:check
              branch:
                pattern: release-\\d+
          title: sqa_criteria
          type: object
        environment:
          additionalProperties:
            type: string
          example:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          title: environment
          type: object
        timeout:
          minimum: 1
          title: timeout
          type: integer
      title: JePL_config
      type: object
    ServiceDockerCompose:
      additionalProperties:
        properties:
          build:
            properties:
              context:
                type: string
              dockerfile:
                type: string
              args:
                additionalProperties:
                  type: string
                type: object
            type: object
          image:
            properties:
              name:
                type: string
              registry:
                properties:
                  push:
                    type: boolean
                  url:
                    format: uri
                    type: string
                  credential_id:
                    type: string
                type: object
            required:
            - name
            type: object
          hostname:
            type: string
          volumes:
            items:
              properties:
                type:
                  enum:
                  - bind
                  type: string
                source:
                  type: string
                target:
                  type: string
              type: object
            type: array
          command:
            type: string
          environment:
            $ref: '#/components/schemas/Environment'
          oneshot:
            default: true
            type: boolean
        type: object
      example:
        checkstyle:
          build:
            context: ./dir
            dockerfile: Dockerfile-alternate
            args:
              buildno: 1
          image:
            name: checkstyle/maven-builder-image
            registry:
              push: true
              url: https://hub.docker.com/
              credential_id: my-dockerhub-cred
          hostname: checkstyle-host
          volumes:
          - source: ./
            target: ./simple-java-app
            type: bind
          command: sleep 600000
      title: services
      type: object
    JePL_composer:
      example:
        services:
          checkstyle:
            build:
              context: ./dir
              dockerfile: Dockerfile-alternate
              args:
                buildno: 1
            image:
              name: checkstyle/maven-builder-image
              registry:
                push: true
                url: https://hub.docker.com/
                credential_id: my-dockerhub-cred
            hostname: checkstyle-host
            volumes:
            - source: ./
              target: ./simple-java-app
              type: bind
            command: sleep 600000
        version: "3.7"
      properties:
        version:
          example: "3.7"
          title: version
          type: string
        services:
          additionalProperties:
            properties:
              build:
                properties:
                  context:
                    type: string
                  dockerfile:
                    type: string
                  args:
                    additionalProperties:
                      type: string
                    type: object
                type: object
              image:
                properties:
                  name:
                    type: string
                  registry:
                    properties:
                      push:
                        type: boolean
                      url:
                        format: uri
                        type: string
                      credential_id:
                        type: string
                    type: object
                required:
                - name
                type: object
              hostname:
                type: string
              volumes:
                items:
                  properties:
                    type:
                      enum:
                      - bind
                      type: string
                    source:
                      type: string
                    target:
                      type: string
                  type: object
                type: array
              command:
                type: string
              environment:
                $ref: '#/components/schemas/Environment'
              oneshot:
                default: true
                type: boolean
            type: object
          example:
            checkstyle:
              build:
                context: ./dir
                dockerfile: Dockerfile-alternate
                args:
                  buildno: 1
              image:
                name: checkstyle/maven-builder-image
                registry:
                  push: true
                  url: https://hub.docker.com/
                  credential_id: my-dockerhub-cred
              hostname: checkstyle-host
              volumes:
              - source: ./
                target: ./simple-java-app
                type: bind
              command: sleep 600000
          title: services
          type: object
      title: JePL_composer
      type: object
    JePL_jenkinsfile:
      example:
        stages:
        - pipeline_config:
            credentials_id: userpass_dockerhub
            base_branch: https://github.com/jenkins-docs/simple-java-maven-app
            base_repository: master
            jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
            config_file: ./.sqa/config.yml
          when:
            branches:
            - master
            - master
        - pipeline_config:
            credentials_id: userpass_dockerhub
            base_branch: https://github.com/jenkins-docs/simple-java-maven-app
            base_repository: master
            jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
            config_file: ./.sqa/config.yml
          when:
            branches:
            - master
            - master
      properties:
        stages:
          items:
            $ref: '#/components/schemas/JePL_jenkinsfile_stages'
          title: stages
          type: array
      title: JePL_jenkinsfile
      type: object
    Pipeline:
      example:
        config_data:
        - environment:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          sqa_criteria:
            QC.Sty:
              repos:
                simple-java-maven-app:
                  container: checkstyle
                  commands:
                  - mvn checkstyle:check
              branch:
                pattern: release-\\d+
          config:
            project_repos:
            - - repo: https://github.com/jenkins-docs/simple-java-maven-app
                branch: master
            - - repo: https://github.com/jenkins-docs/simple-java-maven-app
                branch: master
            credentials:
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
          timeout: 1
        - environment:
            JPL_IGNOREFAILURES: defined
            JPL_DOCKERPUSH: docs service1 service4
          sqa_criteria:
            QC.Sty:
              repos:
                simple-java-maven-app:
                  container: checkstyle
                  commands:
                  - mvn checkstyle:check
              branch:
                pattern: release-\\d+
          config:
            project_repos:
            - - repo: https://github.com/jenkins-docs/simple-java-maven-app
                branch: master
            - - repo: https://github.com/jenkins-docs/simple-java-maven-app
                branch: master
            credentials:
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
            - password_var: GIT_PASS
              username_var: GIT_USER
              id: my-dockerhub-token
              type: username_password
          timeout: 1
        composer_data:
          services:
            checkstyle:
              build:
                context: ./dir
                dockerfile: Dockerfile-alternate
                args:
                  buildno: 1
              image:
                name: checkstyle/maven-builder-image
                registry:
                  push: true
                  url: https://hub.docker.com/
                  credential_id: my-dockerhub-cred
              hostname: checkstyle-host
              volumes:
              - source: ./
                target: ./simple-java-app
                type: bind
              command: sleep 600000
          version: "3.7"
        name: sqaaas-api-spec
        id: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
        jenkinsfile_data:
          stages:
          - pipeline_config:
              credentials_id: userpass_dockerhub
              base_branch: https://github.com/jenkins-docs/simple-java-maven-app
              base_repository: master
              jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
              config_file: ./.sqa/config.yml
            when:
              branches:
              - master
              - master
          - pipeline_config:
              credentials_id: userpass_dockerhub
              base_branch: https://github.com/jenkins-docs/simple-java-maven-app
              base_repository: master
              jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
              config_file: ./.sqa/config.yml
            when:
              branches:
              - master
              - master
      properties:
        id:
          example: dd7d8481-81a3-407f-95f0-a2f1cb382a4b
          readOnly: true
          title: id
          type: string
        name:
          example: sqaaas-api-spec
          format: '[A-Za-z0-9_.-]'
          title: name
          type: string
        config_data:
          items:
            $ref: '#/components/schemas/JePL_config'
          title: config_data
          type: array
        composer_data:
          $ref: '#/components/schemas/JePL_composer'
        jenkinsfile_data:
          $ref: '#/components/schemas/JePL_jenkinsfile'
      title: Pipeline
      type: object
    UpstreamError:
      properties:
        upstream_status:
          title: upstream_status
          type: integer
        upstream_reason:
          title: upstream_reason
          type: string
      required:
      - upstream_reason
      - upstream_status
      title: UpstreamError
      type: object
    Badge:
      example:
        openBadgeId: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw
        createdAt: 2021-04-07T10:34:02.960Z
        createdBy: e3h49VVbQRKQphuAAmxpgQ
        badgeclass: sBS3EsJQRAC0ENTmvETtQw
        issuer: aS1lWKgIR4u8bGjPZUzAyg
        image: https://api.eu.badgr.io/public/assertions/KSwijifTQ_-I1lb9FtX1bw/image
        recipient:
          identity: sha256$5cb2939f3ae83961b31407fbfd2978e5c642177e50227eb0c7f550c0653803dc
          hashed: true
          type: url
          plaintextIdentity: https://github.com/EOSC-synergy/test-sqaaas-web.sqaaas/commit/41a4a73505f407d57e7ed600dd5de7cf963feda3
        issuedOn: 2021-04-07T10:07:00.000Z
      properties:
        openBadgeID:
          format: uri
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        badgeClass:
          type: string
        issuer:
          type: string
        image:
          format: uri
          type: string
        recipient:
          $ref: '#/components/schemas/Badge_recipient'
        issuedOn:
          format: date-time
          type: string
      title: Badge
      type: object
    inline_response_201:
      example:
        id: id
      properties:
        id:
          description: UUID identifying the pipeline
          title: id
          type: string
      title: inline_response_201
      type: object
    inline_response_200:
      example:
        file_name: '{"file_name":"config.yml"}'
        content:
          QC.Sty:
            repos:
              simple-java-maven-app:
                container: checkstyle
                commands:
                - mvn checkstyle:check
            branch:
              pattern: release-\\d+
      properties:
        file_name:
          example: '{"file_name":"config.yml"}'
          title: file_name
          type: string
        content:
          additionalProperties:
            minProperties: 1
            properties:
              repos:
                items:
                  additionalProperties: false
                  properties:
                    repo_url:
                      format: uri
                      type: string
                    container:
                      type: string
                    commands:
                      $ref: '#/components/schemas/Commands_simplified'
                    tox:
                      $ref: '#/components/schemas/Tox_simplified'
                    tools:
                      items:
                        $ref: '#/components/schemas/Tool'
                      type: array
                  type: object
                type: array
              when:
                additionalProperties: false
                properties:
                  branch:
                    $ref: '#/components/schemas/When_branch'
                  building_tag:
                    $ref: '#/components/schemas/When_building_tag'
                type: object
            required:
            - repos
            type: object
          example:
            QC.Sty:
              repos:
                simple-java-maven-app:
                  container: checkstyle
                  commands:
                  - mvn checkstyle:check
              branch:
                pattern: release-\\d+
          title: sqa_criteria
          type: object
      title: inline_response_200
      type: object
    inline_response_200_1:
      example:
        file_name: '{"file_name":"script.sh"}'
        content: |-
          (
          cd workdir ; npm install
          )
      properties:
        file_name:
          example: '{"file_name":"script.sh"}'
          title: file_name
          type: string
        content:
          example: |-
            (
            cd workdir ; npm install
            )
          title: content
          type: string
      title: inline_response_200_1
      type: object
    inline_response_200_2:
      example:
        file_name: '{"file_name":"docker-compose.yml"}'
        content:
          services:
            checkstyle:
              build:
                context: ./dir
                dockerfile: Dockerfile-alternate
                args:
                  buildno: 1
              image:
                name: checkstyle/maven-builder-image
                registry:
                  push: true
                  url: https://hub.docker.com/
                  credential_id: my-dockerhub-cred
              hostname: checkstyle-host
              volumes:
              - source: ./
                target: ./simple-java-app
                type: bind
              command: sleep 600000
          version: "3.7"
      properties:
        file_name:
          example: '{"file_name":"docker-compose.yml"}'
          title: file_name
          type: string
        content:
          $ref: '#/components/schemas/JePL_composer'
      title: inline_response_200_2
      type: object
    inline_response_200_3:
      example:
        file_name: Jenkinsfile
        content: |-
          @Library(['github.com/indigo-dc/jenkins-pipeline-library@release/2.1.0']) _

          def projectConfig

          pipeline {
              agent any

              stages {
                  stage('SQA baseline criterion: QC.Sty') {
                      when {
                          branch pattern: 'sqaaas', comparator: ''
                      }
                      steps {
                          script {
                              projectConfig = pipelineConfig(
                                  configFile: '.sqa/config.yml',
                                  scmConfigs: [ localBranch: true ]
                              )
                              buildStages(projectConfig)
                          }
                      }
                      post {
                          cleanup {
                              cleanWs()
                          }
                      }
                  }
                  stage('SQA baseline criterion: QC.Doc') {
                      when {
                          branch pattern: 'build', comparator: ''
                      }
                      steps {
                          script {
                              projectConfig = pipelineConfig(
                                  configFile: '.sqa/config.snappy-peach-chicken.yml',
                                  scmConfigs: [ localBranch: true ]
                              )
                              buildStages(projectConfig)
                          }
                      }
                      post {
                          cleanup {
                              cleanWs()
                          }
                      }
                  }
              }
          }
      properties:
        file_name:
          example: '{"file_name":"Jenkinsfile"}'
          type: string
        content:
          type: string
      title: inline_response_200_3
      type: object
    inline_response_200_4:
      example:
        openbadge_id: https://openapi-generator.tech
        build_status: success
        build_url: https://openapi-generator.tech
      properties:
        build_url:
          format: uri
          title: build_url
          type: string
        build_status:
          enum:
          - success
          - failure
          - aborted
          - not_built
          - unstable
          - waiting_scan_org
          title: build_status
          type: string
        openbadge_id:
          format: uri
          title: openbadge_id
          type: string
      title: inline_response_200_4
      type: object
    inline_object:
      properties:
        repo:
          description: URL of the upstream repo
          format: uri
          type: string
        branch:
          description: Brach from the upstream repo used as the base for the pull
            request
          type: string
      required:
      - repo
      type: object
    inline_response_200_5:
      example:
        pull_request_url: https://openapi-generator.tech
      properties:
        pull_request_url:
          format: uri
          title: pull_request_url
          type: string
      title: inline_response_200_5
      type: object
    Tool_docker:
      example:
        image: image
        dockerfile: dockerfile
        reviewed: 2000-01-23
        oneshot: true
      properties:
        image:
          title: image
          type: string
        dockerfile:
          title: dockerfile
          type: string
        reviewed:
          format: date
          title: reviewed
          type: string
        oneshot:
          default: true
          title: oneshot
          type: boolean
      title: Tool_docker
      type: object
    Criterion_description:
      example:
        msg: msg
        docs: https://openapi-generator.tech
        improves: improves
      properties:
        msg:
          title: msg
          type: string
        improves:
          title: improves
          type: string
        docs:
          format: uri
          title: docs
          type: string
      title: Criterion_description
      type: object
    JePL_config_config:
      example:
        project_repos:
        - - repo: https://github.com/jenkins-docs/simple-java-maven-app
            branch: master
        - - repo: https://github.com/jenkins-docs/simple-java-maven-app
            branch: master
        credentials:
        - password_var: GIT_PASS
          username_var: GIT_USER
          id: my-dockerhub-token
          type: username_password
        - password_var: GIT_PASS
          username_var: GIT_USER
          id: my-dockerhub-token
          type: username_password
      properties:
        project_repos:
          items:
            $ref: '#/components/schemas/Repository'
          title: project_repos
          type: array
        credentials:
          items:
            $ref: '#/components/schemas/Creds_user_pass'
          title: credentials
          type: array
      title: JePL_config_config
      type: object
    JePL_jenkinsfile_when:
      example:
        branches:
        - master
        - master
      properties:
        branches:
          items:
            example: master
            type: string
          title: branches
          type: array
      title: JePL_jenkinsfile_when
      type: object
    JePL_jenkinsfile_pipeline_config:
      example:
        credentials_id: userpass_dockerhub
        base_branch: https://github.com/jenkins-docs/simple-java-maven-app
        base_repository: master
        jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
        config_file: ./.sqa/config.yml
      properties:
        config_file:
          example: ./.sqa/config.yml
          title: config_file
          type: string
        base_repository:
          example: master
          title: base_repository
          type: string
        base_branch:
          example: https://github.com/jenkins-docs/simple-java-maven-app
          title: base_branch
          type: string
        credentials_id:
          example: userpass_dockerhub
          title: credentials_id
          type: string
        jepl_validator_docker_image:
          example: eoscsynergy/jpl-validator:1.1.0
          title: jepl_validator_docker_image
          type: string
      title: JePL_jenkinsfile_pipeline_config
      type: object
    JePL_jenkinsfile_stages:
      example:
        pipeline_config:
          credentials_id: userpass_dockerhub
          base_branch: https://github.com/jenkins-docs/simple-java-maven-app
          base_repository: master
          jepl_validator_docker_image: eoscsynergy/jpl-validator:1.1.0
          config_file: ./.sqa/config.yml
        when:
          branches:
          - master
          - master
      properties:
        when:
          $ref: '#/components/schemas/JePL_jenkinsfile_when'
        pipeline_config:
          $ref: '#/components/schemas/JePL_jenkinsfile_pipeline_config'
      title: JePL_jenkinsfile_stages
      type: object
    Badge_recipient:
      properties:
        identity:
          title: identity
          type: string
        hashed:
          title: hashed
          type: boolean
        type:
          enum:
          - email
          - openBadgeId
          - telephone
          - url
          title: type
          type: string
        plaintextIdentity:
          title: plaintextIdentity
          type: string
      title: Badge_recipient
      type: object
