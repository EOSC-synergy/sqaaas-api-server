# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BadgeRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: str=None, hashed: bool=None, type: str=None, plaintext_identity: str=None):
        """BadgeRecipient - a model defined in OpenAPI

        :param identity: The identity of this BadgeRecipient.
        :param hashed: The hashed of this BadgeRecipient.
        :param type: The type of this BadgeRecipient.
        :param plaintext_identity: The plaintext_identity of this BadgeRecipient.
        """
        self.openapi_types = {
            'identity': str,
            'hashed': bool,
            'type': str,
            'plaintext_identity': str
        }

        self.attribute_map = {
            'identity': 'identity',
            'hashed': 'hashed',
            'type': 'type',
            'plaintext_identity': 'plaintextIdentity'
        }

        self._identity = identity
        self._hashed = hashed
        self._type = type
        self._plaintext_identity = plaintext_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadgeRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Badge_recipient of this BadgeRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this BadgeRecipient.


        :return: The identity of this BadgeRecipient.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this BadgeRecipient.


        :param identity: The identity of this BadgeRecipient.
        :type identity: str
        """

        self._identity = identity

    @property
    def hashed(self):
        """Gets the hashed of this BadgeRecipient.


        :return: The hashed of this BadgeRecipient.
        :rtype: bool
        """
        return self._hashed

    @hashed.setter
    def hashed(self, hashed):
        """Sets the hashed of this BadgeRecipient.


        :param hashed: The hashed of this BadgeRecipient.
        :type hashed: bool
        """

        self._hashed = hashed

    @property
    def type(self):
        """Gets the type of this BadgeRecipient.


        :return: The type of this BadgeRecipient.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BadgeRecipient.


        :param type: The type of this BadgeRecipient.
        :type type: str
        """
        allowed_values = ["email", "openBadgeId", "telephone", "url"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def plaintext_identity(self):
        """Gets the plaintext_identity of this BadgeRecipient.


        :return: The plaintext_identity of this BadgeRecipient.
        :rtype: str
        """
        return self._plaintext_identity

    @plaintext_identity.setter
    def plaintext_identity(self, plaintext_identity):
        """Sets the plaintext_identity of this BadgeRecipient.


        :param plaintext_identity: The plaintext_identity of this BadgeRecipient.
        :type plaintext_identity: str
        """

        self._plaintext_identity = plaintext_identity
