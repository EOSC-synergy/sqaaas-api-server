# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.service_docker_compose_addl_props_build import ServiceDockerComposeAddlPropsBuild
from openapi_server.models.service_docker_compose_addl_props_image import ServiceDockerComposeAddlPropsImage
from openapi_server.models.service_docker_compose_addl_props_volumes_inner import ServiceDockerComposeAddlPropsVolumesInner
from openapi_server import util


class ServiceDockerComposeAddlProps(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: ServiceDockerComposeAddlPropsBuild=None, image: ServiceDockerComposeAddlPropsImage=None, hostname: str=None, volumes: List[ServiceDockerComposeAddlPropsVolumesInner]=None, command: str=None, environment: Dict[str, str]=None, oneshot: bool=True):
        """ServiceDockerComposeAddlProps - a model defined in OpenAPI

        :param build: The build of this ServiceDockerComposeAddlProps.
        :param image: The image of this ServiceDockerComposeAddlProps.
        :param hostname: The hostname of this ServiceDockerComposeAddlProps.
        :param volumes: The volumes of this ServiceDockerComposeAddlProps.
        :param command: The command of this ServiceDockerComposeAddlProps.
        :param environment: The environment of this ServiceDockerComposeAddlProps.
        :param oneshot: The oneshot of this ServiceDockerComposeAddlProps.
        """
        self.openapi_types = {
            'build': ServiceDockerComposeAddlPropsBuild,
            'image': ServiceDockerComposeAddlPropsImage,
            'hostname': str,
            'volumes': List[ServiceDockerComposeAddlPropsVolumesInner],
            'command': str,
            'environment': Dict[str, str],
            'oneshot': bool
        }

        self.attribute_map = {
            'build': 'build',
            'image': 'image',
            'hostname': 'hostname',
            'volumes': 'volumes',
            'command': 'command',
            'environment': 'environment',
            'oneshot': 'oneshot'
        }

        self._build = build
        self._image = image
        self._hostname = hostname
        self._volumes = volumes
        self._command = command
        self._environment = environment
        self._oneshot = oneshot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDockerComposeAddlProps':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDockerCompose_addl_props of this ServiceDockerComposeAddlProps.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this ServiceDockerComposeAddlProps.


        :return: The build of this ServiceDockerComposeAddlProps.
        :rtype: ServiceDockerComposeAddlPropsBuild
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ServiceDockerComposeAddlProps.


        :param build: The build of this ServiceDockerComposeAddlProps.
        :type build: ServiceDockerComposeAddlPropsBuild
        """

        self._build = build

    @property
    def image(self):
        """Gets the image of this ServiceDockerComposeAddlProps.


        :return: The image of this ServiceDockerComposeAddlProps.
        :rtype: ServiceDockerComposeAddlPropsImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ServiceDockerComposeAddlProps.


        :param image: The image of this ServiceDockerComposeAddlProps.
        :type image: ServiceDockerComposeAddlPropsImage
        """

        self._image = image

    @property
    def hostname(self):
        """Gets the hostname of this ServiceDockerComposeAddlProps.


        :return: The hostname of this ServiceDockerComposeAddlProps.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ServiceDockerComposeAddlProps.


        :param hostname: The hostname of this ServiceDockerComposeAddlProps.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def volumes(self):
        """Gets the volumes of this ServiceDockerComposeAddlProps.


        :return: The volumes of this ServiceDockerComposeAddlProps.
        :rtype: List[ServiceDockerComposeAddlPropsVolumesInner]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ServiceDockerComposeAddlProps.


        :param volumes: The volumes of this ServiceDockerComposeAddlProps.
        :type volumes: List[ServiceDockerComposeAddlPropsVolumesInner]
        """

        self._volumes = volumes

    @property
    def command(self):
        """Gets the command of this ServiceDockerComposeAddlProps.


        :return: The command of this ServiceDockerComposeAddlProps.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ServiceDockerComposeAddlProps.


        :param command: The command of this ServiceDockerComposeAddlProps.
        :type command: str
        """

        self._command = command

    @property
    def environment(self):
        """Gets the environment of this ServiceDockerComposeAddlProps.

        Environment variables to be used at pipeline runtime

        :return: The environment of this ServiceDockerComposeAddlProps.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ServiceDockerComposeAddlProps.

        Environment variables to be used at pipeline runtime

        :param environment: The environment of this ServiceDockerComposeAddlProps.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def oneshot(self):
        """Gets the oneshot of this ServiceDockerComposeAddlProps.


        :return: The oneshot of this ServiceDockerComposeAddlProps.
        :rtype: bool
        """
        return self._oneshot

    @oneshot.setter
    def oneshot(self, oneshot):
        """Sets the oneshot of this ServiceDockerComposeAddlProps.


        :param oneshot: The oneshot of this ServiceDockerComposeAddlProps.
        :type oneshot: bool
        """

        self._oneshot = oneshot
