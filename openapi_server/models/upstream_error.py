# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UpstreamError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, upstream_status: int=None, upstream_reason: str=None):
        """UpstreamError - a model defined in OpenAPI

        :param upstream_status: The upstream_status of this UpstreamError.
        :param upstream_reason: The upstream_reason of this UpstreamError.
        """
        self.openapi_types = {
            'upstream_status': int,
            'upstream_reason': str
        }

        self.attribute_map = {
            'upstream_status': 'upstream_status',
            'upstream_reason': 'upstream_reason'
        }

        self._upstream_status = upstream_status
        self._upstream_reason = upstream_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpstreamError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpstreamError of this UpstreamError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def upstream_status(self):
        """Gets the upstream_status of this UpstreamError.


        :return: The upstream_status of this UpstreamError.
        :rtype: int
        """
        return self._upstream_status

    @upstream_status.setter
    def upstream_status(self, upstream_status):
        """Sets the upstream_status of this UpstreamError.


        :param upstream_status: The upstream_status of this UpstreamError.
        :type upstream_status: int
        """
        if upstream_status is None:
            raise ValueError("Invalid value for `upstream_status`, must not be `None`")

        self._upstream_status = upstream_status

    @property
    def upstream_reason(self):
        """Gets the upstream_reason of this UpstreamError.


        :return: The upstream_reason of this UpstreamError.
        :rtype: str
        """
        return self._upstream_reason

    @upstream_reason.setter
    def upstream_reason(self, upstream_reason):
        """Sets the upstream_reason of this UpstreamError.


        :param upstream_reason: The upstream_reason of this UpstreamError.
        :type upstream_reason: str
        """
        if upstream_reason is None:
            raise ValueError("Invalid value for `upstream_reason`, must not be `None`")

        self._upstream_reason = upstream_reason
