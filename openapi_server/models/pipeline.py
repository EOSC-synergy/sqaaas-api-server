# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.je_pl_composer import JePLComposer
from openapi_server.models.je_pl_config import JePLConfig
from openapi_server.models.je_pl_jenkinsfile import JePLJenkinsfile
from openapi_server import util


class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, config_data: List[JePLConfig]=None, composer_data: JePLComposer=None, jenkinsfile_data: JePLJenkinsfile=None):
        """Pipeline - a model defined in OpenAPI

        :param id: The id of this Pipeline.
        :param name: The name of this Pipeline.
        :param config_data: The config_data of this Pipeline.
        :param composer_data: The composer_data of this Pipeline.
        :param jenkinsfile_data: The jenkinsfile_data of this Pipeline.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'config_data': List[JePLConfig],
            'composer_data': JePLComposer,
            'jenkinsfile_data': JePLJenkinsfile
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'config_data': 'config_data',
            'composer_data': 'composer_data',
            'jenkinsfile_data': 'jenkinsfile_data'
        }

        self._id = id
        self._name = name
        self._config_data = config_data
        self._composer_data = composer_data
        self._jenkinsfile_data = jenkinsfile_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pipeline of this Pipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Pipeline.

        ID of the criterion

        :return: The id of this Pipeline.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.

        ID of the criterion

        :param id: The id of this Pipeline.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Pipeline.

        Name that identifies the pipeline

        :return: The name of this Pipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.

        Name that identifies the pipeline

        :param name: The name of this Pipeline.
        :type name: str
        """

        self._name = name

    @property
    def config_data(self):
        """Gets the config_data of this Pipeline.

        Details about the pipeline configuration

        :return: The config_data of this Pipeline.
        :rtype: List[JePLConfig]
        """
        return self._config_data

    @config_data.setter
    def config_data(self, config_data):
        """Sets the config_data of this Pipeline.

        Details about the pipeline configuration

        :param config_data: The config_data of this Pipeline.
        :type config_data: List[JePLConfig]
        """

        self._config_data = config_data

    @property
    def composer_data(self):
        """Gets the composer_data of this Pipeline.


        :return: The composer_data of this Pipeline.
        :rtype: JePLComposer
        """
        return self._composer_data

    @composer_data.setter
    def composer_data(self, composer_data):
        """Sets the composer_data of this Pipeline.


        :param composer_data: The composer_data of this Pipeline.
        :type composer_data: JePLComposer
        """

        self._composer_data = composer_data

    @property
    def jenkinsfile_data(self):
        """Gets the jenkinsfile_data of this Pipeline.


        :return: The jenkinsfile_data of this Pipeline.
        :rtype: JePLJenkinsfile
        """
        return self._jenkinsfile_data

    @jenkinsfile_data.setter
    def jenkinsfile_data(self, jenkinsfile_data):
        """Sets the jenkinsfile_data of this Pipeline.


        :param jenkinsfile_data: The jenkinsfile_data of this Pipeline.
        :type jenkinsfile_data: JePLJenkinsfile
        """

        self._jenkinsfile_data = jenkinsfile_data
