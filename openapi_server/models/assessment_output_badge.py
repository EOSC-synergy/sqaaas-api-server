# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.badge import Badge
from openapi_server import util


class AssessmentOutputBadge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, software: Badge=None, services: Badge=None, fair: Badge=None):
        """AssessmentOutputBadge - a model defined in OpenAPI

        :param software: The software of this AssessmentOutputBadge.
        :param services: The services of this AssessmentOutputBadge.
        :param fair: The fair of this AssessmentOutputBadge.
        """
        self.openapi_types = {
            'software': Badge,
            'services': Badge,
            'fair': Badge
        }

        self.attribute_map = {
            'software': 'software',
            'services': 'services',
            'fair': 'fair'
        }

        self._software = software
        self._services = services
        self._fair = fair

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutputBadge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutput_badge of this AssessmentOutputBadge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def software(self):
        """Gets the software of this AssessmentOutputBadge.


        :return: The software of this AssessmentOutputBadge.
        :rtype: Badge
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this AssessmentOutputBadge.


        :param software: The software of this AssessmentOutputBadge.
        :type software: Badge
        """

        self._software = software

    @property
    def services(self):
        """Gets the services of this AssessmentOutputBadge.


        :return: The services of this AssessmentOutputBadge.
        :rtype: Badge
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this AssessmentOutputBadge.


        :param services: The services of this AssessmentOutputBadge.
        :type services: Badge
        """

        self._services = services

    @property
    def fair(self):
        """Gets the fair of this AssessmentOutputBadge.


        :return: The fair of this AssessmentOutputBadge.
        :rtype: Badge
        """
        return self._fair

    @fair.setter
    def fair(self, fair):
        """Sets the fair of this AssessmentOutputBadge.


        :param fair: The fair of this AssessmentOutputBadge.
        :type fair: Badge
        """

        self._fair = fair
