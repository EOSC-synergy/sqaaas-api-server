# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.assessment_output_validator_plugin import AssessmentOutputValidatorPlugin
from openapi_server.models.assessment_output_validator_standard import AssessmentOutputValidatorStandard
from openapi_server.models.assessment_output_validator_tool import AssessmentOutputValidatorTool
from openapi_server import util


class AssessmentOutputValidator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, valid: bool=None, message: str=None, plugin: AssessmentOutputValidatorPlugin=None, tool: AssessmentOutputValidatorTool=None, standard: AssessmentOutputValidatorStandard=None, data_unstructured: object=None):
        """AssessmentOutputValidator - a model defined in OpenAPI

        :param valid: The valid of this AssessmentOutputValidator.
        :param message: The message of this AssessmentOutputValidator.
        :param plugin: The plugin of this AssessmentOutputValidator.
        :param tool: The tool of this AssessmentOutputValidator.
        :param standard: The standard of this AssessmentOutputValidator.
        :param data_unstructured: The data_unstructured of this AssessmentOutputValidator.
        """
        self.openapi_types = {
            'valid': bool,
            'message': str,
            'plugin': AssessmentOutputValidatorPlugin,
            'tool': AssessmentOutputValidatorTool,
            'standard': AssessmentOutputValidatorStandard,
            'data_unstructured': object
        }

        self.attribute_map = {
            'valid': 'valid',
            'message': 'message',
            'plugin': 'plugin',
            'tool': 'tool',
            'standard': 'standard',
            'data_unstructured': 'data_unstructured'
        }

        self._valid = valid
        self._message = message
        self._plugin = plugin
        self._tool = tool
        self._standard = standard
        self._data_unstructured = data_unstructured

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutputValidator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutputValidator of this AssessmentOutputValidator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid(self):
        """Gets the valid of this AssessmentOutputValidator.

        <true> if the subcriterion is valid

        :return: The valid of this AssessmentOutputValidator.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this AssessmentOutputValidator.

        <true> if the subcriterion is valid

        :param valid: The valid of this AssessmentOutputValidator.
        :type valid: bool
        """

        self._valid = valid

    @property
    def message(self):
        """Gets the message of this AssessmentOutputValidator.

        Evidence message

        :return: The message of this AssessmentOutputValidator.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssessmentOutputValidator.

        Evidence message

        :param message: The message of this AssessmentOutputValidator.
        :type message: str
        """

        self._message = message

    @property
    def plugin(self):
        """Gets the plugin of this AssessmentOutputValidator.


        :return: The plugin of this AssessmentOutputValidator.
        :rtype: AssessmentOutputValidatorPlugin
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this AssessmentOutputValidator.


        :param plugin: The plugin of this AssessmentOutputValidator.
        :type plugin: AssessmentOutputValidatorPlugin
        """

        self._plugin = plugin

    @property
    def tool(self):
        """Gets the tool of this AssessmentOutputValidator.


        :return: The tool of this AssessmentOutputValidator.
        :rtype: AssessmentOutputValidatorTool
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this AssessmentOutputValidator.


        :param tool: The tool of this AssessmentOutputValidator.
        :type tool: AssessmentOutputValidatorTool
        """

        self._tool = tool

    @property
    def standard(self):
        """Gets the standard of this AssessmentOutputValidator.


        :return: The standard of this AssessmentOutputValidator.
        :rtype: AssessmentOutputValidatorStandard
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this AssessmentOutputValidator.


        :param standard: The standard of this AssessmentOutputValidator.
        :type standard: AssessmentOutputValidatorStandard
        """

        self._standard = standard

    @property
    def data_unstructured(self):
        """Gets the data_unstructured of this AssessmentOutputValidator.


        :return: The data_unstructured of this AssessmentOutputValidator.
        :rtype: object
        """
        return self._data_unstructured

    @data_unstructured.setter
    def data_unstructured(self, data_unstructured):
        """Sets the data_unstructured of this AssessmentOutputValidator.


        :param data_unstructured: The data_unstructured of this AssessmentOutputValidator.
        :type data_unstructured: object
        """

        self._data_unstructured = data_unstructured
