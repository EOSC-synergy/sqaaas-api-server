# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.je_pl_config_config import JePLConfigConfig
from openapi_server import util


class JePLConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: JePLConfigConfig=None, sqa_criteria: Dict[str, object]=None, environment: Dict[str, str]=None, timeout: int=None):
        """JePLConfig - a model defined in OpenAPI

        :param config: The config of this JePLConfig.
        :param sqa_criteria: The sqa_criteria of this JePLConfig.
        :param environment: The environment of this JePLConfig.
        :param timeout: The timeout of this JePLConfig.
        """
        self.openapi_types = {
            'config': JePLConfigConfig,
            'sqa_criteria': Dict[str, object],
            'environment': Dict[str, str],
            'timeout': int
        }

        self.attribute_map = {
            'config': 'config',
            'sqa_criteria': 'sqa_criteria',
            'environment': 'environment',
            'timeout': 'timeout'
        }

        self._config = config
        self._sqa_criteria = sqa_criteria
        self._environment = environment
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JePLConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JePL_config of this JePLConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this JePLConfig.


        :return: The config of this JePLConfig.
        :rtype: JePLConfigConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this JePLConfig.


        :param config: The config of this JePLConfig.
        :type config: JePLConfigConfig
        """

        self._config = config

    @property
    def sqa_criteria(self):
        """Gets the sqa_criteria of this JePLConfig.


        :return: The sqa_criteria of this JePLConfig.
        :rtype: Dict[str, object]
        """
        return self._sqa_criteria

    @sqa_criteria.setter
    def sqa_criteria(self, sqa_criteria):
        """Sets the sqa_criteria of this JePLConfig.


        :param sqa_criteria: The sqa_criteria of this JePLConfig.
        :type sqa_criteria: Dict[str, object]
        """

        self._sqa_criteria = sqa_criteria

    @property
    def environment(self):
        """Gets the environment of this JePLConfig.


        :return: The environment of this JePLConfig.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this JePLConfig.


        :param environment: The environment of this JePLConfig.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def timeout(self):
        """Gets the timeout of this JePLConfig.


        :return: The timeout of this JePLConfig.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this JePLConfig.


        :param timeout: The timeout of this JePLConfig.
        :type timeout: int
        """
        if timeout is not None and timeout < 1:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")

        self._timeout = timeout
