# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AssessmentOutputToolCI(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: str=None, stdout_command: List[str]=None, stdout_text: str=None, url: str=None):
        """AssessmentOutputToolCI - a model defined in OpenAPI

        :param name: The name of this AssessmentOutputToolCI.
        :param status: The status of this AssessmentOutputToolCI.
        :param stdout_command: The stdout_command of this AssessmentOutputToolCI.
        :param stdout_text: The stdout_text of this AssessmentOutputToolCI.
        :param url: The url of this AssessmentOutputToolCI.
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'stdout_command': List[str],
            'stdout_text': str,
            'url': str
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'stdout_command': 'stdout_command',
            'stdout_text': 'stdout_text',
            'url': 'url'
        }

        self._name = name
        self._status = status
        self._stdout_command = stdout_command
        self._stdout_text = stdout_text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutputToolCI':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutputToolCI of this AssessmentOutputToolCI.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssessmentOutputToolCI.

        name of the stage the tool was executed

        :return: The name of this AssessmentOutputToolCI.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentOutputToolCI.

        name of the stage the tool was executed

        :param name: The name of this AssessmentOutputToolCI.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this AssessmentOutputToolCI.

        string-like exit status of the stage where the tool ran

        :return: The status of this AssessmentOutputToolCI.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssessmentOutputToolCI.

        string-like exit status of the stage where the tool ran

        :param status: The status of this AssessmentOutputToolCI.
        :type status: str
        """
        allowed_values = ["SUCCESS", "FAILURE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stdout_command(self):
        """Gets the stdout_command of this AssessmentOutputToolCI.

        list of commands executed in the stage

        :return: The stdout_command of this AssessmentOutputToolCI.
        :rtype: List[str]
        """
        return self._stdout_command

    @stdout_command.setter
    def stdout_command(self, stdout_command):
        """Sets the stdout_command of this AssessmentOutputToolCI.

        list of commands executed in the stage

        :param stdout_command: The stdout_command of this AssessmentOutputToolCI.
        :type stdout_command: List[str]
        """

        self._stdout_command = stdout_command

    @property
    def stdout_text(self):
        """Gets the stdout_text of this AssessmentOutputToolCI.

        string containing the output of the tool execution

        :return: The stdout_text of this AssessmentOutputToolCI.
        :rtype: str
        """
        return self._stdout_text

    @stdout_text.setter
    def stdout_text(self, stdout_text):
        """Sets the stdout_text of this AssessmentOutputToolCI.

        string containing the output of the tool execution

        :param stdout_text: The stdout_text of this AssessmentOutputToolCI.
        :type stdout_text: str
        """

        self._stdout_text = stdout_text

    @property
    def url(self):
        """Gets the url of this AssessmentOutputToolCI.

        URL of the stage

        :return: The url of this AssessmentOutputToolCI.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AssessmentOutputToolCI.

        URL of the stage

        :param url: The url of this AssessmentOutputToolCI.
        :type url: str
        """

        self._url = url
