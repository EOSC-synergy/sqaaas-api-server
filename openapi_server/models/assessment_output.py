# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.assessment_output_badge import AssessmentOutputBadge
from openapi_server.models.assessment_output_report import AssessmentOutputReport
from openapi_server import util


class AssessmentOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report: Dict[str, AssessmentOutputReport]=None, badge: AssessmentOutputBadge=None):
        """AssessmentOutput - a model defined in OpenAPI

        :param report: The report of this AssessmentOutput.
        :param badge: The badge of this AssessmentOutput.
        """
        self.openapi_types = {
            'report': Dict[str, AssessmentOutputReport],
            'badge': AssessmentOutputBadge
        }

        self.attribute_map = {
            'report': 'report',
            'badge': 'badge'
        }

        self._report = report
        self._badge = badge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutput of this AssessmentOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report(self):
        """Gets the report of this AssessmentOutput.


        :return: The report of this AssessmentOutput.
        :rtype: Dict[str, AssessmentOutputReport]
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this AssessmentOutput.


        :param report: The report of this AssessmentOutput.
        :type report: Dict[str, AssessmentOutputReport]
        """

        self._report = report

    @property
    def badge(self):
        """Gets the badge of this AssessmentOutput.


        :return: The badge of this AssessmentOutput.
        :rtype: AssessmentOutputBadge
        """
        return self._badge

    @badge.setter
    def badge(self, badge):
        """Sets the badge of this AssessmentOutput.


        :param badge: The badge of this AssessmentOutput.
        :type badge: AssessmentOutputBadge
        """

        self._badge = badge
