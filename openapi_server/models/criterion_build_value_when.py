# SPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>
# SPDX-FileContributor: Pablo Orviz <orviz@ifca.unican.es>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

from datetime import date, datetime
from typing import Dict, List, Type

from openapi_server import util
from openapi_server.models.base_model_ import Model
from openapi_server.models.when_branch import WhenBranch


class CriterionBuildValueWhen(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: WhenBranch = None, building_tag: bool = None):
        """CriterionBuildValueWhen - a model defined in OpenAPI

        :param branch: The branch of this CriterionBuildValueWhen.
        :param building_tag: The building_tag of this CriterionBuildValueWhen.
        """
        self.openapi_types = {"branch": WhenBranch, "building_tag": bool}

        self.attribute_map = {"branch": "branch", "building_tag": "building_tag"}

        self._branch = branch
        self._building_tag = building_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> "CriterionBuildValueWhen":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CriterionBuild_value_when of this CriterionBuildValueWhen.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this CriterionBuildValueWhen.


        :return: The branch of this CriterionBuildValueWhen.
        :rtype: WhenBranch
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CriterionBuildValueWhen.


        :param branch: The branch of this CriterionBuildValueWhen.
        :type branch: WhenBranch
        """

        self._branch = branch

    @property
    def building_tag(self):
        """Gets the building_tag of this CriterionBuildValueWhen.


        :return: The building_tag of this CriterionBuildValueWhen.
        :rtype: bool
        """
        return self._building_tag

    @building_tag.setter
    def building_tag(self, building_tag):
        """Sets the building_tag of this CriterionBuildValueWhen.


        :param building_tag: The building_tag of this CriterionBuildValueWhen.
        :type building_tag: bool
        """

        self._building_tag = building_tag
