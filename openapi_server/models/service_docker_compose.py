# SPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>
# SPDX-FileContributor: Pablo Orviz <orviz@ifca.unican.es>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

from datetime import date, datetime
from typing import Dict, List, Type

from openapi_server import util
from openapi_server.models.base_model_ import Model
from openapi_server.models.service_docker_compose_volumes import (
    ServiceDockerComposeVolumes,
)


class ServiceDockerCompose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        service_id: str = None,
        image: str = None,
        hostname: str = None,
        volumes: List[ServiceDockerComposeVolumes] = None,
        command: str = None,
    ):
        """ServiceDockerCompose - a model defined in OpenAPI

        :param service_id: The service_id of this ServiceDockerCompose.
        :param image: The image of this ServiceDockerCompose.
        :param hostname: The hostname of this ServiceDockerCompose.
        :param volumes: The volumes of this ServiceDockerCompose.
        :param command: The command of this ServiceDockerCompose.
        """
        self.openapi_types = {
            "service_id": str,
            "image": str,
            "hostname": str,
            "volumes": List[ServiceDockerComposeVolumes],
            "command": str,
        }

        self.attribute_map = {
            "service_id": "service_id",
            "image": "image",
            "hostname": "hostname",
            "volumes": "volumes",
            "command": "command",
        }

        self._service_id = service_id
        self._image = image
        self._hostname = hostname
        self._volumes = volumes
        self._command = command

    @classmethod
    def from_dict(cls, dikt: dict) -> "ServiceDockerCompose":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDockerCompose of this ServiceDockerCompose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_id(self):
        """Gets the service_id of this ServiceDockerCompose.


        :return: The service_id of this ServiceDockerCompose.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceDockerCompose.


        :param service_id: The service_id of this ServiceDockerCompose.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def image(self):
        """Gets the image of this ServiceDockerCompose.


        :return: The image of this ServiceDockerCompose.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ServiceDockerCompose.


        :param image: The image of this ServiceDockerCompose.
        :type image: str
        """

        self._image = image

    @property
    def hostname(self):
        """Gets the hostname of this ServiceDockerCompose.


        :return: The hostname of this ServiceDockerCompose.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ServiceDockerCompose.


        :param hostname: The hostname of this ServiceDockerCompose.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def volumes(self):
        """Gets the volumes of this ServiceDockerCompose.


        :return: The volumes of this ServiceDockerCompose.
        :rtype: List[ServiceDockerComposeVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ServiceDockerCompose.


        :param volumes: The volumes of this ServiceDockerCompose.
        :type volumes: List[ServiceDockerComposeVolumes]
        """

        self._volumes = volumes

    @property
    def command(self):
        """Gets the command of this ServiceDockerCompose.


        :return: The command of this ServiceDockerCompose.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ServiceDockerCompose.


        :param command: The command of this ServiceDockerCompose.
        :type command: str
        """

        self._command = command
