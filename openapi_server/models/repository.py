# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repo: str=None, branch: str=None):
        """Repository - a model defined in OpenAPI

        :param repo: The repo of this Repository.
        :param branch: The branch of this Repository.
        """
        self.openapi_types = {
            'repo': str,
            'branch': str
        }

        self.attribute_map = {
            'repo': 'repo',
            'branch': 'branch'
        }

        self._repo = repo
        self._branch = branch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repo(self):
        """Gets the repo of this Repository.


        :return: The repo of this Repository.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Repository.


        :param repo: The repo of this Repository.
        :type repo: str
        """

        self._repo = repo

    @property
    def branch(self):
        """Gets the branch of this Repository.


        :return: The branch of this Repository.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Repository.


        :param branch: The branch of this Repository.
        :type branch: str
        """

        self._branch = branch
