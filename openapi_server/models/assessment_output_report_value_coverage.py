# SPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>
# SPDX-FileContributor: Pablo Orviz <orviz@ifca.unican.es>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

from datetime import date, datetime
from typing import Dict, List, Type

from openapi_server import util
from openapi_server.models.base_model_ import Model


class AssessmentOutputReportValueCoverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        percentage: float = None,
        total_subcriteria: int = None,
        success_subcriteria: int = None,
    ):
        """AssessmentOutputReportValueCoverage - a model defined in OpenAPI

        :param percentage: The percentage of this AssessmentOutputReportValueCoverage.
        :param total_subcriteria: The total_subcriteria of this AssessmentOutputReportValueCoverage.
        :param success_subcriteria: The success_subcriteria of this AssessmentOutputReportValueCoverage.
        """
        self.openapi_types = {
            "percentage": float,
            "total_subcriteria": int,
            "success_subcriteria": int,
        }

        self.attribute_map = {
            "percentage": "percentage",
            "total_subcriteria": "total_subcriteria",
            "success_subcriteria": "success_subcriteria",
        }

        self._percentage = percentage
        self._total_subcriteria = total_subcriteria
        self._success_subcriteria = success_subcriteria

    @classmethod
    def from_dict(cls, dikt: dict) -> "AssessmentOutputReportValueCoverage":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutput_report_value_coverage of this AssessmentOutputReportValueCoverage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this AssessmentOutputReportValueCoverage.

        Overall percentage of criterion coverage

        :return: The percentage of this AssessmentOutputReportValueCoverage.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this AssessmentOutputReportValueCoverage.

        Overall percentage of criterion coverage

        :param percentage: The percentage of this AssessmentOutputReportValueCoverage.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def total_subcriteria(self):
        """Gets the total_subcriteria of this AssessmentOutputReportValueCoverage.

        Number of total subcriteria assessed for the criterion

        :return: The total_subcriteria of this AssessmentOutputReportValueCoverage.
        :rtype: int
        """
        return self._total_subcriteria

    @total_subcriteria.setter
    def total_subcriteria(self, total_subcriteria):
        """Sets the total_subcriteria of this AssessmentOutputReportValueCoverage.

        Number of total subcriteria assessed for the criterion

        :param total_subcriteria: The total_subcriteria of this AssessmentOutputReportValueCoverage.
        :type total_subcriteria: int
        """

        self._total_subcriteria = total_subcriteria

    @property
    def success_subcriteria(self):
        """Gets the success_subcriteria of this AssessmentOutputReportValueCoverage.

        Number of subcriteria evaluates as success

        :return: The success_subcriteria of this AssessmentOutputReportValueCoverage.
        :rtype: int
        """
        return self._success_subcriteria

    @success_subcriteria.setter
    def success_subcriteria(self, success_subcriteria):
        """Sets the success_subcriteria of this AssessmentOutputReportValueCoverage.

        Number of subcriteria evaluates as success

        :param success_subcriteria: The success_subcriteria of this AssessmentOutputReportValueCoverage.
        :type success_subcriteria: int
        """

        self._success_subcriteria = success_subcriteria
