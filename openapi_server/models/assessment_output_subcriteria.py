# SPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

from datetime import date, datetime
from typing import Dict, List, Type

from openapi_server import util
from openapi_server.models.assessment_output_validator import AssessmentOutputValidator
from openapi_server.models.base_model_ import Model


class AssessmentOutputSubcriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        description: str = None,
        valid: bool = None,
        evidence: List[AssessmentOutputValidator] = None,
        hint: str = None,
        required_for_next_level_badge: bool = None,
    ):
        """AssessmentOutputSubcriteria - a model defined in OpenAPI

        :param description: The description of this AssessmentOutputSubcriteria.
        :param valid: The valid of this AssessmentOutputSubcriteria.
        :param evidence: The evidence of this AssessmentOutputSubcriteria.
        :param hint: The hint of this AssessmentOutputSubcriteria.
        :param required_for_next_level_badge: The required_for_next_level_badge of this AssessmentOutputSubcriteria.
        """
        self.openapi_types = {
            "description": str,
            "valid": bool,
            "evidence": List[AssessmentOutputValidator],
            "hint": str,
            "required_for_next_level_badge": bool,
        }

        self.attribute_map = {
            "description": "description",
            "valid": "valid",
            "evidence": "evidence",
            "hint": "hint",
            "required_for_next_level_badge": "required_for_next_level_badge",
        }

        self._description = description
        self._valid = valid
        self._evidence = evidence
        self._hint = hint
        self._required_for_next_level_badge = required_for_next_level_badge

    @classmethod
    def from_dict(cls, dikt: dict) -> "AssessmentOutputSubcriteria":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutputSubcriteria of this AssessmentOutputSubcriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AssessmentOutputSubcriteria.

        Short statement about the goal of the given subcriterion

        :return: The description of this AssessmentOutputSubcriteria.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssessmentOutputSubcriteria.

        Short statement about the goal of the given subcriterion

        :param description: The description of this AssessmentOutputSubcriteria.
        :type description: str
        """

        self._description = description

    @property
    def valid(self):
        """Gets the valid of this AssessmentOutputSubcriteria.

        Overall validity of the subcriterion

        :return: The valid of this AssessmentOutputSubcriteria.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this AssessmentOutputSubcriteria.

        Overall validity of the subcriterion

        :param valid: The valid of this AssessmentOutputSubcriteria.
        :type valid: bool
        """

        self._valid = valid

    @property
    def evidence(self):
        """Gets the evidence of this AssessmentOutputSubcriteria.

        Evidence obtained by the tools for the given subcriterion

        :return: The evidence of this AssessmentOutputSubcriteria.
        :rtype: List[AssessmentOutputValidator]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this AssessmentOutputSubcriteria.

        Evidence obtained by the tools for the given subcriterion

        :param evidence: The evidence of this AssessmentOutputSubcriteria.
        :type evidence: List[AssessmentOutputValidator]
        """

        self._evidence = evidence

    @property
    def hint(self):
        """Gets the hint of this AssessmentOutputSubcriteria.

        Provide hints to fulfill the current subcriterion

        :return: The hint of this AssessmentOutputSubcriteria.
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this AssessmentOutputSubcriteria.

        Provide hints to fulfill the current subcriterion

        :param hint: The hint of this AssessmentOutputSubcriteria.
        :type hint: str
        """

        self._hint = hint

    @property
    def required_for_next_level_badge(self):
        """Gets the required_for_next_level_badge of this AssessmentOutputSubcriteria.

        Whether current subcriterion is required for the next level of badging

        :return: The required_for_next_level_badge of this AssessmentOutputSubcriteria.
        :rtype: bool
        """
        return self._required_for_next_level_badge

    @required_for_next_level_badge.setter
    def required_for_next_level_badge(self, required_for_next_level_badge):
        """Sets the required_for_next_level_badge of this AssessmentOutputSubcriteria.

        Whether current subcriterion is required for the next level of badging

        :param required_for_next_level_badge: The required_for_next_level_badge of this AssessmentOutputSubcriteria.
        :type required_for_next_level_badge: bool
        """

        self._required_for_next_level_badge = required_for_next_level_badge
