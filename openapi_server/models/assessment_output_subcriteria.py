# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.assessment_output_validator import AssessmentOutputValidator
from openapi_server import util


class AssessmentOutputSubcriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, valid: bool=None, evidence: List[AssessmentOutputValidator]=None):
        """AssessmentOutputSubcriteria - a model defined in OpenAPI

        :param description: The description of this AssessmentOutputSubcriteria.
        :param valid: The valid of this AssessmentOutputSubcriteria.
        :param evidence: The evidence of this AssessmentOutputSubcriteria.
        """
        self.openapi_types = {
            'description': str,
            'valid': bool,
            'evidence': List[AssessmentOutputValidator]
        }

        self.attribute_map = {
            'description': 'description',
            'valid': 'valid',
            'evidence': 'evidence'
        }

        self._description = description
        self._valid = valid
        self._evidence = evidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutputSubcriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutputSubcriteria of this AssessmentOutputSubcriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AssessmentOutputSubcriteria.


        :return: The description of this AssessmentOutputSubcriteria.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssessmentOutputSubcriteria.


        :param description: The description of this AssessmentOutputSubcriteria.
        :type description: str
        """

        self._description = description

    @property
    def valid(self):
        """Gets the valid of this AssessmentOutputSubcriteria.

        <true> if the subcriterion is valid

        :return: The valid of this AssessmentOutputSubcriteria.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this AssessmentOutputSubcriteria.

        <true> if the subcriterion is valid

        :param valid: The valid of this AssessmentOutputSubcriteria.
        :type valid: bool
        """

        self._valid = valid

    @property
    def evidence(self):
        """Gets the evidence of this AssessmentOutputSubcriteria.


        :return: The evidence of this AssessmentOutputSubcriteria.
        :rtype: List[AssessmentOutputValidator]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this AssessmentOutputSubcriteria.


        :param evidence: The evidence of this AssessmentOutputSubcriteria.
        :type evidence: List[AssessmentOutputValidator]
        """

        self._evidence = evidence
