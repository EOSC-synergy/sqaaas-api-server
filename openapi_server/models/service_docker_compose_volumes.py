# SPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServiceDockerComposeVolumes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        volume_type: str = None,
        volume_source: str = None,
        volume_target: str = None,
    ):
        """ServiceDockerComposeVolumes - a model defined in OpenAPI

        :param volume_type: The volume_type of this ServiceDockerComposeVolumes.
        :param volume_source: The volume_source of this ServiceDockerComposeVolumes.
        :param volume_target: The volume_target of this ServiceDockerComposeVolumes.
        """
        self.openapi_types = {
            "volume_type": str,
            "volume_source": str,
            "volume_target": str,
        }

        self.attribute_map = {
            "volume_type": "volume_type",
            "volume_source": "volume_source",
            "volume_target": "volume_target",
        }

        self._volume_type = volume_type
        self._volume_source = volume_source
        self._volume_target = volume_target

    @classmethod
    def from_dict(cls, dikt: dict) -> "ServiceDockerComposeVolumes":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDockerCompose_volumes of this ServiceDockerComposeVolumes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_type(self):
        """Gets the volume_type of this ServiceDockerComposeVolumes.


        :return: The volume_type of this ServiceDockerComposeVolumes.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this ServiceDockerComposeVolumes.


        :param volume_type: The volume_type of this ServiceDockerComposeVolumes.
        :type volume_type: str
        """
        allowed_values = ["bind"]  # noqa: E501
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}".format(
                    volume_type, allowed_values
                )
            )

        self._volume_type = volume_type

    @property
    def volume_source(self):
        """Gets the volume_source of this ServiceDockerComposeVolumes.


        :return: The volume_source of this ServiceDockerComposeVolumes.
        :rtype: str
        """
        return self._volume_source

    @volume_source.setter
    def volume_source(self, volume_source):
        """Sets the volume_source of this ServiceDockerComposeVolumes.


        :param volume_source: The volume_source of this ServiceDockerComposeVolumes.
        :type volume_source: str
        """

        self._volume_source = volume_source

    @property
    def volume_target(self):
        """Gets the volume_target of this ServiceDockerComposeVolumes.


        :return: The volume_target of this ServiceDockerComposeVolumes.
        :rtype: str
        """
        return self._volume_target

    @volume_target.setter
    def volume_target(self, volume_target):
        """Sets the volume_target of this ServiceDockerComposeVolumes.


        :param volume_target: The volume_target of this ServiceDockerComposeVolumes.
        :type volume_target: str
        """

        self._volume_target = volume_target
