# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AssessmentOutputData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, required: Dict[str, str]=None, recommended: Dict[str, str]=None, optional: Dict[str, str]=None):
        """AssessmentOutputData - a model defined in OpenAPI

        :param required: The required of this AssessmentOutputData.
        :param recommended: The recommended of this AssessmentOutputData.
        :param optional: The optional of this AssessmentOutputData.
        """
        self.openapi_types = {
            'required': Dict[str, str],
            'recommended': Dict[str, str],
            'optional': Dict[str, str]
        }

        self.attribute_map = {
            'required': 'REQUIRED',
            'recommended': 'RECOMMENDED',
            'optional': 'OPTIONAL'
        }

        self._required = required
        self._recommended = recommended
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentOutputData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentOutput_data of this AssessmentOutputData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def required(self):
        """Gets the required of this AssessmentOutputData.


        :return: The required of this AssessmentOutputData.
        :rtype: Dict[str, str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AssessmentOutputData.


        :param required: The required of this AssessmentOutputData.
        :type required: Dict[str, str]
        """

        self._required = required

    @property
    def recommended(self):
        """Gets the recommended of this AssessmentOutputData.


        :return: The recommended of this AssessmentOutputData.
        :rtype: Dict[str, str]
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """Sets the recommended of this AssessmentOutputData.


        :param recommended: The recommended of this AssessmentOutputData.
        :type recommended: Dict[str, str]
        """

        self._recommended = recommended

    @property
    def optional(self):
        """Gets the optional of this AssessmentOutputData.


        :return: The optional of this AssessmentOutputData.
        :rtype: Dict[str, str]
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this AssessmentOutputData.


        :param optional: The optional of this AssessmentOutputData.
        :type optional: Dict[str, str]
        """

        self._optional = optional
